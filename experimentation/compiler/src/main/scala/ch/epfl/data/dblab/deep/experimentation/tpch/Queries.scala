/* Generated by Purgatory 2014-2017 */

package ch.epfl.data.dblab.deep.experimentation.tpch

import ch.epfl.data.sc.pardis
import pardis.ir._
import pardis.types.PardisTypeImplicits._
import pardis.effects._
import pardis.deep._
import pardis.deep.scalalib._
import pardis.deep.scalalib.collection._
import pardis.deep.scalalib.io._

import ch.epfl.data.sc.pardis.quasi.anf.{ BaseExt, BaseExtIR }
import ch.epfl.data.sc.pardis.quasi.TypeParameters.MaybeParamTag

trait QueriesOps extends Base with TPCHLoaderOps with Q1GRPRecordOps with Q3GRPRecordOps with Q7GRPRecordOps with Q9GRPRecordOps with Q10GRPRecordOps with Q13IntRecordOps with Q16GRPRecord1Ops with Q16GRPRecord2Ops with Q18GRPRecordOps with Q20GRPRecordOps { this: ch.epfl.data.dblab.deep.dsls.QueryEngineExp =>
  // Type representation
  val QueriesType = QueriesIRs.QueriesType
  implicit val typeQueries: TypeRep[Queries] = QueriesType
  implicit class QueriesRep(self: Rep[Queries]) {

  }
  object Queries {
    def Q1(numRuns: Rep[Int]): Rep[Unit] = queriesQ1Object(numRuns)
    def Q1_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ1_functionalObject(numRuns)
    def Q1_functional_p2(numRuns: Rep[Int]): Rep[Unit] = queriesQ1_functional_p2Object(numRuns)
    def Q2(numRuns: Rep[Int]): Rep[Unit] = queriesQ2Object(numRuns)
    def Q2_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ2_functionalObject(numRuns)
    def Q3(numRuns: Rep[Int]): Rep[Unit] = queriesQ3Object(numRuns)
    def Q3_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ3_functionalObject(numRuns)
    def Q4(numRuns: Rep[Int]): Rep[Unit] = queriesQ4Object(numRuns)
    def Q4_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ4_functionalObject(numRuns)
    def Q5(numRuns: Rep[Int]): Rep[Unit] = queriesQ5Object(numRuns)
    def Q5_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ5_functionalObject(numRuns)
    def Q6(numRuns: Rep[Int]): Rep[Unit] = queriesQ6Object(numRuns)
    def Q6_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ6_functionalObject(numRuns)
    def Q7(numRuns: Rep[Int]): Rep[Unit] = queriesQ7Object(numRuns)
    def Q8(numRuns: Rep[Int]): Rep[Unit] = queriesQ8Object(numRuns)
    def Q9(numRuns: Rep[Int]): Rep[Unit] = queriesQ9Object(numRuns)
    def Q9_p2(numRuns: Rep[Int]): Rep[Unit] = queriesQ9_p2Object(numRuns)
    def Q9_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ9_functionalObject(numRuns)
    def Q10(numRuns: Rep[Int]): Rep[Unit] = queriesQ10Object(numRuns)
    def Q10_p2(numRuns: Rep[Int]): Rep[Unit] = queriesQ10_p2Object(numRuns)
    def Q10_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ10_functionalObject(numRuns)
    def Q11(numRuns: Rep[Int]): Rep[Unit] = queriesQ11Object(numRuns)
    def Q11_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ11_functionalObject(numRuns)
    def Q12(numRuns: Rep[Int]): Rep[Unit] = queriesQ12Object(numRuns)
    def Q12_p2(numRuns: Rep[Int]): Rep[Unit] = queriesQ12_p2Object(numRuns)
    def Q12_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ12_functionalObject(numRuns)
    def Q12_functional_p2(numRuns: Rep[Int]): Rep[Unit] = queriesQ12_functional_p2Object(numRuns)
    def Q13(numRuns: Rep[Int]): Rep[Unit] = queriesQ13Object(numRuns)
    def Q14(numRuns: Rep[Int]): Rep[Unit] = queriesQ14Object(numRuns)
    def Q14_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ14_functionalObject(numRuns)
    def Q15(numRuns: Rep[Int]): Rep[Unit] = queriesQ15Object(numRuns)
    def Q16(numRuns: Rep[Int]): Rep[Unit] = queriesQ16Object(numRuns)
    def Q17(numRuns: Rep[Int]): Rep[Unit] = queriesQ17Object(numRuns)
    def Q18(numRuns: Rep[Int]): Rep[Unit] = queriesQ18Object(numRuns)
    def Q18_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ18_functionalObject(numRuns)
    def Q19(numRuns: Rep[Int]): Rep[Unit] = queriesQ19Object(numRuns)
    def Q19_p2(numRuns: Rep[Int]): Rep[Unit] = queriesQ19_p2Object(numRuns)
    def Q19_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ19_functionalObject(numRuns)
    def Q20(numRuns: Rep[Int]): Rep[Unit] = queriesQ20Object(numRuns)
    def Q20_functional(numRuns: Rep[Int]): Rep[Unit] = queriesQ20_functionalObject(numRuns)
    def Q21(numRuns: Rep[Int]): Rep[Unit] = queriesQ21Object(numRuns)
    def Q22(numRuns: Rep[Int]): Rep[Unit] = queriesQ22Object(numRuns)
  }
  // constructors

  // IR defs
  val QueriesQ1Object = QueriesIRs.QueriesQ1Object
  type QueriesQ1Object = QueriesIRs.QueriesQ1Object
  val QueriesQ1_functionalObject = QueriesIRs.QueriesQ1_functionalObject
  type QueriesQ1_functionalObject = QueriesIRs.QueriesQ1_functionalObject
  val QueriesQ1_functional_p2Object = QueriesIRs.QueriesQ1_functional_p2Object
  type QueriesQ1_functional_p2Object = QueriesIRs.QueriesQ1_functional_p2Object
  val QueriesQ2Object = QueriesIRs.QueriesQ2Object
  type QueriesQ2Object = QueriesIRs.QueriesQ2Object
  val QueriesQ2_functionalObject = QueriesIRs.QueriesQ2_functionalObject
  type QueriesQ2_functionalObject = QueriesIRs.QueriesQ2_functionalObject
  val QueriesQ3Object = QueriesIRs.QueriesQ3Object
  type QueriesQ3Object = QueriesIRs.QueriesQ3Object
  val QueriesQ3_functionalObject = QueriesIRs.QueriesQ3_functionalObject
  type QueriesQ3_functionalObject = QueriesIRs.QueriesQ3_functionalObject
  val QueriesQ4Object = QueriesIRs.QueriesQ4Object
  type QueriesQ4Object = QueriesIRs.QueriesQ4Object
  val QueriesQ4_functionalObject = QueriesIRs.QueriesQ4_functionalObject
  type QueriesQ4_functionalObject = QueriesIRs.QueriesQ4_functionalObject
  val QueriesQ5Object = QueriesIRs.QueriesQ5Object
  type QueriesQ5Object = QueriesIRs.QueriesQ5Object
  val QueriesQ5_functionalObject = QueriesIRs.QueriesQ5_functionalObject
  type QueriesQ5_functionalObject = QueriesIRs.QueriesQ5_functionalObject
  val QueriesQ6Object = QueriesIRs.QueriesQ6Object
  type QueriesQ6Object = QueriesIRs.QueriesQ6Object
  val QueriesQ6_functionalObject = QueriesIRs.QueriesQ6_functionalObject
  type QueriesQ6_functionalObject = QueriesIRs.QueriesQ6_functionalObject
  val QueriesQ7Object = QueriesIRs.QueriesQ7Object
  type QueriesQ7Object = QueriesIRs.QueriesQ7Object
  val QueriesQ8Object = QueriesIRs.QueriesQ8Object
  type QueriesQ8Object = QueriesIRs.QueriesQ8Object
  val QueriesQ9Object = QueriesIRs.QueriesQ9Object
  type QueriesQ9Object = QueriesIRs.QueriesQ9Object
  val QueriesQ9_p2Object = QueriesIRs.QueriesQ9_p2Object
  type QueriesQ9_p2Object = QueriesIRs.QueriesQ9_p2Object
  val QueriesQ9_functionalObject = QueriesIRs.QueriesQ9_functionalObject
  type QueriesQ9_functionalObject = QueriesIRs.QueriesQ9_functionalObject
  val QueriesQ10Object = QueriesIRs.QueriesQ10Object
  type QueriesQ10Object = QueriesIRs.QueriesQ10Object
  val QueriesQ10_p2Object = QueriesIRs.QueriesQ10_p2Object
  type QueriesQ10_p2Object = QueriesIRs.QueriesQ10_p2Object
  val QueriesQ10_functionalObject = QueriesIRs.QueriesQ10_functionalObject
  type QueriesQ10_functionalObject = QueriesIRs.QueriesQ10_functionalObject
  val QueriesQ11Object = QueriesIRs.QueriesQ11Object
  type QueriesQ11Object = QueriesIRs.QueriesQ11Object
  val QueriesQ11_functionalObject = QueriesIRs.QueriesQ11_functionalObject
  type QueriesQ11_functionalObject = QueriesIRs.QueriesQ11_functionalObject
  val QueriesQ12Object = QueriesIRs.QueriesQ12Object
  type QueriesQ12Object = QueriesIRs.QueriesQ12Object
  val QueriesQ12_p2Object = QueriesIRs.QueriesQ12_p2Object
  type QueriesQ12_p2Object = QueriesIRs.QueriesQ12_p2Object
  val QueriesQ12_functionalObject = QueriesIRs.QueriesQ12_functionalObject
  type QueriesQ12_functionalObject = QueriesIRs.QueriesQ12_functionalObject
  val QueriesQ12_functional_p2Object = QueriesIRs.QueriesQ12_functional_p2Object
  type QueriesQ12_functional_p2Object = QueriesIRs.QueriesQ12_functional_p2Object
  val QueriesQ13Object = QueriesIRs.QueriesQ13Object
  type QueriesQ13Object = QueriesIRs.QueriesQ13Object
  val QueriesQ14Object = QueriesIRs.QueriesQ14Object
  type QueriesQ14Object = QueriesIRs.QueriesQ14Object
  val QueriesQ14_functionalObject = QueriesIRs.QueriesQ14_functionalObject
  type QueriesQ14_functionalObject = QueriesIRs.QueriesQ14_functionalObject
  val QueriesQ15Object = QueriesIRs.QueriesQ15Object
  type QueriesQ15Object = QueriesIRs.QueriesQ15Object
  val QueriesQ16Object = QueriesIRs.QueriesQ16Object
  type QueriesQ16Object = QueriesIRs.QueriesQ16Object
  val QueriesQ17Object = QueriesIRs.QueriesQ17Object
  type QueriesQ17Object = QueriesIRs.QueriesQ17Object
  val QueriesQ18Object = QueriesIRs.QueriesQ18Object
  type QueriesQ18Object = QueriesIRs.QueriesQ18Object
  val QueriesQ18_functionalObject = QueriesIRs.QueriesQ18_functionalObject
  type QueriesQ18_functionalObject = QueriesIRs.QueriesQ18_functionalObject
  val QueriesQ19Object = QueriesIRs.QueriesQ19Object
  type QueriesQ19Object = QueriesIRs.QueriesQ19Object
  val QueriesQ19_p2Object = QueriesIRs.QueriesQ19_p2Object
  type QueriesQ19_p2Object = QueriesIRs.QueriesQ19_p2Object
  val QueriesQ19_functionalObject = QueriesIRs.QueriesQ19_functionalObject
  type QueriesQ19_functionalObject = QueriesIRs.QueriesQ19_functionalObject
  val QueriesQ20Object = QueriesIRs.QueriesQ20Object
  type QueriesQ20Object = QueriesIRs.QueriesQ20Object
  val QueriesQ20_functionalObject = QueriesIRs.QueriesQ20_functionalObject
  type QueriesQ20_functionalObject = QueriesIRs.QueriesQ20_functionalObject
  val QueriesQ21Object = QueriesIRs.QueriesQ21Object
  type QueriesQ21Object = QueriesIRs.QueriesQ21Object
  val QueriesQ22Object = QueriesIRs.QueriesQ22Object
  type QueriesQ22Object = QueriesIRs.QueriesQ22Object
  // method definitions
  def queriesQ1Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ1Object(numRuns)
  def queriesQ1_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ1_functionalObject(numRuns)
  def queriesQ1_functional_p2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ1_functional_p2Object(numRuns)
  def queriesQ2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ2Object(numRuns)
  def queriesQ2_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ2_functionalObject(numRuns)
  def queriesQ3Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ3Object(numRuns)
  def queriesQ3_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ3_functionalObject(numRuns)
  def queriesQ4Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ4Object(numRuns)
  def queriesQ4_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ4_functionalObject(numRuns)
  def queriesQ5Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ5Object(numRuns)
  def queriesQ5_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ5_functionalObject(numRuns)
  def queriesQ6Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ6Object(numRuns)
  def queriesQ6_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ6_functionalObject(numRuns)
  def queriesQ7Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ7Object(numRuns)
  def queriesQ8Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ8Object(numRuns)
  def queriesQ9Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ9Object(numRuns)
  def queriesQ9_p2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ9_p2Object(numRuns)
  def queriesQ9_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ9_functionalObject(numRuns)
  def queriesQ10Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ10Object(numRuns)
  def queriesQ10_p2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ10_p2Object(numRuns)
  def queriesQ10_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ10_functionalObject(numRuns)
  def queriesQ11Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ11Object(numRuns)
  def queriesQ11_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ11_functionalObject(numRuns)
  def queriesQ12Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ12Object(numRuns)
  def queriesQ12_p2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ12_p2Object(numRuns)
  def queriesQ12_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ12_functionalObject(numRuns)
  def queriesQ12_functional_p2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ12_functional_p2Object(numRuns)
  def queriesQ13Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ13Object(numRuns)
  def queriesQ14Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ14Object(numRuns)
  def queriesQ14_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ14_functionalObject(numRuns)
  def queriesQ15Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ15Object(numRuns)
  def queriesQ16Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ16Object(numRuns)
  def queriesQ17Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ17Object(numRuns)
  def queriesQ18Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ18Object(numRuns)
  def queriesQ18_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ18_functionalObject(numRuns)
  def queriesQ19Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ19Object(numRuns)
  def queriesQ19_p2Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ19_p2Object(numRuns)
  def queriesQ19_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ19_functionalObject(numRuns)
  def queriesQ20Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ20Object(numRuns)
  def queriesQ20_functionalObject(numRuns: Rep[Int]): Rep[Unit] = QueriesQ20_functionalObject(numRuns)
  def queriesQ21Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ21Object(numRuns)
  def queriesQ22Object(numRuns: Rep[Int]): Rep[Unit] = QueriesQ22Object(numRuns)
  type Queries = ch.epfl.data.dblab.experimentation.tpch.Queries
}
object QueriesIRs extends Base {
  import TPCHLoaderIRs._
  import Q1GRPRecordIRs._
  import Q3GRPRecordIRs._
  import Q7GRPRecordIRs._
  import Q9GRPRecordIRs._
  import Q10GRPRecordIRs._
  import Q13IntRecordIRs._
  import Q16GRPRecord1IRs._
  import Q16GRPRecord2IRs._
  import Q18GRPRecordIRs._
  import Q20GRPRecordIRs._
  // Type representation
  case object QueriesType extends TypeRep[Queries] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = QueriesType
    val name = "Queries"
    val typeArguments = Nil
  }
  implicit val typeQueries: TypeRep[Queries] = QueriesType
  // case classes
  case class QueriesQ1Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q1", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ1_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q1_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ1_functional_p2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q1_functional_p2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ2_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q2_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ3Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q3", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ3_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q3_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ4Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q4", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ4_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q4_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ5Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q5", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ5_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q5_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ6Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q6", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ6_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q6_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ7Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q7", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ8Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q8", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ9Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q9", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ9_p2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q9_p2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ9_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q9_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ10Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q10", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ10_p2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q10_p2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ10_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q10_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ11Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q11", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ11_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q11_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ12Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q12", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ12_p2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q12_p2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ12_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q12_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ12_functional_p2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q12_functional_p2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ13Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q13", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ14Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q14", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ14_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q14_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ15Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q15", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ16Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q16", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ17Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q17", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ18Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q18", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ18_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q18_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ19Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q19", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ19_p2Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q19_p2", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ19_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q19_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ20Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q20", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ20_functionalObject(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q20_functional", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ21Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q21", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  case class QueriesQ22Object(numRuns: Rep[Int]) extends FunctionDef[Unit](None, "Queries.Q22", List(List(numRuns))) {
    override def curriedConstructor = (copy _)
  }

  type Queries = ch.epfl.data.dblab.experimentation.tpch.Queries
}
trait QueriesImplicits extends QueriesOps { this: ch.epfl.data.dblab.deep.dsls.QueryEngineExp =>
  // Add implicit conversions here!
}
trait QueriesComponent extends QueriesOps with QueriesImplicits { this: ch.epfl.data.dblab.deep.dsls.QueryEngineExp => }

trait QueriesImplementations extends QueriesOps { this: ch.epfl.data.dblab.deep.dsls.QueryEngineExp =>
  override def queriesQ1Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1998-09-02"));
        val lineitemScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$less$eq(constantDate))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]] = __newAggOp(lineitemScan, unit(9))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => __newQ1GRPRecord(x.L_RETURNFLAG, x.L_LINESTATUS))))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_DISCOUNT.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_QUANTITY.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT)).$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT)).$times(unit(1.0).$plus(t.L_TAX)).$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val mapOp: this.Rep[ch.epfl.data.dblab.queryengine.push.MapOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]] = __newMapOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]) => kv.aggs.update(unit(6), kv.aggs.apply(unit(1)).$div(kv.aggs.apply(unit(5)))))), __lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]) => kv.aggs.update(unit(7), kv.aggs.apply(unit(2)).$div(kv.aggs.apply(unit(5)))))), __lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]) => kv.aggs.update(unit(8), kv.aggs.apply(unit(0)).$div(kv.aggs.apply(unit(5)))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]] = __newSortOp(mapOp)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]) => {
          var res: this.Var[Int] = __newVarNamed(kv1.key.L_RETURNFLAG.$minus(kv2.key.L_RETURNFLAG), unit("res"));
          __ifThenElse(infix_$eq$eq(__readVar(res), unit(0)), __assign(res, kv1.key.L_LINESTATUS.$minus(kv2.key.L_LINESTATUS)), unit(()));
          __readVar(res)
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord]]) => printf(unit("%c|%c|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.0f\n"), kv.key.L_RETURNFLAG, kv.key.L_LINESTATUS, kv.aggs.apply(unit(1)), kv.aggs.apply(unit(2)), kv.aggs.apply(unit(3)), kv.aggs.apply(unit(4)), kv.aggs.apply(unit(6)), kv.aggs.apply(unit(7)), kv.aggs.apply(unit(8)), kv.aggs.apply(unit(5))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ1_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](TPCHLoader.loadLineitem());
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1998-09-02"));
        val result: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord, Array[Double])]] = lineitemTable.filter(__lambda(((x$1: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$1.L_SHIPDATE.$less$eq(constantDate)))).groupBy[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord](__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => __newQ1GRPRecord(x.L_RETURNFLAG, x.L_LINESTATUS)))).mapValues[Array[Double]](__lambda(((l: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => Array.apply(l.map[Double](__lambda(((x$2: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$2.L_DISCOUNT))).sum, l.map[Double](__lambda(((x$3: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$3.L_QUANTITY))).sum, l.map[Double](__lambda(((x$4: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$4.L_EXTENDEDPRICE))).sum, l.map[Double](__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT))))).sum, l.map[Double](__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT)).$times(unit(1.0).$plus(t.L_TAX))))).sum, l.count.toDouble, l.map[Double](__lambda(((x$5: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$5.L_QUANTITY))).avg, l.map[Double](__lambda(((x$6: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$6.L_EXTENDEDPRICE))).avg, l.map[Double](__lambda(((x$7: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$7.L_DISCOUNT))).avg)))).sortBy[Int](__lambda(((t: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord, Array[Double])]) => t._1.L_RETURNFLAG.toInt.$times(unit(128)).$plus(t._1.L_LINESTATUS.toInt))));
        result.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord, Array[Double])]) => printf(unit("%c|%c|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.0f\n"), kv._1.L_RETURNFLAG, kv._1.L_LINESTATUS, kv._2.apply(unit(1)), kv._2.apply(unit(2)), kv._2.apply(unit(3)), kv._2.apply(unit(4)), kv._2.apply(unit(6)), kv._2.apply(unit(7)), kv._2.apply(unit(8)), kv._2.apply(unit(5))))), unit(-1))
      }))))
    }
  }
  override def queriesQ1_functional_p2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1998-09-02"));
        val result: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord, Array[Double])]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x$8: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$8.L_SHIPDATE.$less$eq(constantDate)))).groupBy[ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord](__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => __newQ1GRPRecord(x.L_RETURNFLAG, x.L_LINESTATUS)))).mapValues[Array[Double]](__lambda(((l: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => {
          var x0: this.Var[Double] = __newVarNamed(unit(0.0), unit("x0"));
          var x1: this.Var[Double] = __newVarNamed(unit(0.0), unit("x1"));
          var x2: this.Var[Double] = __newVarNamed(unit(0.0), unit("x2"));
          var x3: this.Var[Double] = __newVarNamed(unit(0.0), unit("x3"));
          var x4: this.Var[Double] = __newVarNamed(unit(0.0), unit("x4"));
          var x5: this.Var[Double] = __newVarNamed(unit(0.0), unit("x5"));
          l.foreach(__lambda(((cur: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => {
            __assign(x0, __readVar(x0).$plus(cur.L_DISCOUNT));
            __assign(x1, __readVar(x1).$plus(cur.L_QUANTITY));
            __assign(x2, __readVar(x2).$plus(cur.L_EXTENDEDPRICE));
            __assign(x3, __readVar(x3).$plus(cur.L_EXTENDEDPRICE.$times(unit(1.0).$minus(cur.L_DISCOUNT))));
            __assign(x4, __readVar(x4).$plus(cur.L_EXTENDEDPRICE.$times(unit(1.0).$minus(cur.L_DISCOUNT)).$times(unit(1.0).$plus(cur.L_TAX))));
            __assign(x5, __readVar(x5).$plus(unit(1)))
          })));
          Array.apply(__readVar(x0), __readVar(x1), __readVar(x2), __readVar(x3), __readVar(x4), __readVar(x5), __readVar(x1).$div(__readVar(x5)), __readVar(x2).$div(__readVar(x5)), __readVar(x0).$div(__readVar(x5)))
        }))).sortBy[Int](__lambda(((t: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord, Array[Double])]) => t._1.L_RETURNFLAG.toInt.$times(unit(128)).$plus(t._1.L_LINESTATUS.toInt))));
        result.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord, Array[Double])]) => printf(unit("%c|%c|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.0f\n"), kv._1.L_RETURNFLAG, kv._1.L_LINESTATUS, kv._2.apply(unit(1)), kv._2.apply(unit(2)), kv._2.apply(unit(3)), kv._2.apply(unit(4)), kv._2.apply(unit(6)), kv._2.apply(unit(7)), kv._2.apply(unit(8)), kv._2.apply(unit(5))))), unit(-1))
      }))))
    }
  }
  override def queriesQ2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = TPCHLoader.loadRegion();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val africa: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AFRICA"));
        val tin: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("TIN"));
        val partsuppScan: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val supplierScan: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, Int]] = __newHashJoinOp(supplierScan, partsuppScan)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => infix_$eq$eq(x.S_SUPPKEY, y.PS_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_SUPPKEY)));
        val nationScan: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], Int]] = __newHashJoinOp(nationScan, jo1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val partScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => infix_$eq$eq(x.P_SIZE, unit(43)).$amp$amp(x.P_TYPE.endsWith(tin)))));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]], Int]] = __newHashJoinOp(partScan, jo2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]) => infix_$eq$eq(x.P_PARTKEY, y.selectDynamic[Int](unit("PS_PARTKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))));
        val regionScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_NAME.$eq$eq$eq(africa))));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]], Int]] = __newHashJoinOp(regionScan, jo3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]) => infix_$eq$eq(x.R_REGIONKEY, y.selectDynamic[Int](unit("N_REGIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]) => x.selectDynamic[Int](unit("N_REGIONKEY")))));
        val wo: this.Rep[ch.epfl.data.dblab.queryengine.push.WindowOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]], Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]] = __newWindowOp(jo4)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]) => x.selectDynamic[Int](unit("P_PARTKEY")))))(__lambda(((x: this.Rep[scala.collection.mutable.Set[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]]) => x.minBy[Double](__lambda(((y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]) => y.selectDynamic[Double](unit("PS_SUPPLYCOST"))))))));
        val so: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]]] = __newSortOp(wo)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]], y: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]]) => __ifThenElse(x.wnd.selectDynamic[Double](unit("S_ACCTBAL")).$less(y.wnd.selectDynamic[Double](unit("S_ACCTBAL"))), unit(1), __ifThenElse(x.wnd.selectDynamic[Double](unit("S_ACCTBAL")).$greater(y.wnd.selectDynamic[Double](unit("S_ACCTBAL"))), unit(-1), {
          var res: this.Var[Int] = __newVarNamed(x.wnd.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")).diff(y.wnd.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME"))), unit("res"));
          __ifThenElse(infix_$eq$eq(__readVar(res), unit(0)), {
            __assign(res, x.wnd.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).diff(y.wnd.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME"))));
            __ifThenElse(infix_$eq$eq(__readVar(res), unit(0)), __assign(res, x.wnd.selectDynamic[Int](unit("P_PARTKEY")).$minus(y.wnd.selectDynamic[Int](unit("P_PARTKEY")))), unit(()))
          }, unit(()));
          __readVar(res)
        })))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]]] = __newPrintOp(so)(__lambda(((e: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]]) => {
          val kv: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]] = e.wnd;
          printf(unit("%.2f|%s|%s|%d|%s|%s|%s|%s\n"), kv.selectDynamic[Double](unit("S_ACCTBAL")), kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")).string, kv.selectDynamic[Int](unit("P_PARTKEY")), kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_MFGR")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_ADDRESS")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_PHONE")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_COMMENT")).string)
        })), unit(100));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ2_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = TPCHLoader.loadRegion();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val africa: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AFRICA"));
        val tin: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("TIN"));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](Query.apply[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](supplierTable)).hashJoin[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, Int](Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord](partsuppTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => infix_$eq$eq(x.S_SUPPKEY, y.PS_SUPPKEY))));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](Query.apply[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](nationTable)).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], Int](jo1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))));
        val partScan: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](partTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => infix_$eq$eq(x.P_SIZE, unit(43)).$amp$amp(x.P_TYPE.endsWith(tin)))));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](partScan).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]], Int](jo2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]) => infix_$eq$eq(x.P_PARTKEY, y.selectDynamic[Int](unit("PS_PARTKEY"))))));
        val regionScan: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord](regionTable).filter(__lambda(((x$9: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x$9.R_NAME.$eq$eq$eq(africa))));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord](regionScan).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]], Int](jo3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]) => x.selectDynamic[Int](unit("N_REGIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]) => infix_$eq$eq(x.R_REGIONKEY, y.selectDynamic[Int](unit("N_REGIONKEY"))))));
        val wo: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]])]] = jo4.groupBy[Int](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]) => x.selectDynamic[Int](unit("P_PARTKEY"))))).mapValues[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]](__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]]) => x.minBy[Double](__lambda(((y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]]) => y.selectDynamic[Double](unit("PS_SUPPLYCOST"))))))));
        val so: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]])]] = wo.sortBy[(Double, String, String, Int)](__lambda(((x: this.Rep[(Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]])]) => Tuple4.apply[Double, String, String, Int](x._2.selectDynamic[Double](unit("S_ACCTBAL")).unary_$minus, x._2.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")).string, x._2.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).string, x._2.selectDynamic[Int](unit("P_PARTKEY"))))));
        so.take(unit(100)).printRows(__lambda(((e: this.Rep[(Int, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]])]) => {
          val kv: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]]] = e._2;
          printf(unit("%.2f|%s|%s|%d|%s|%s|%s|%s\n"), kv.selectDynamic[Double](unit("S_ACCTBAL")), kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")).string, kv.selectDynamic[Int](unit("P_PARTKEY")), kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_MFGR")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_ADDRESS")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_PHONE")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_COMMENT")).string)
        })), unit(-1));
        unit(())
      }))))
    }
  }
  override def queriesQ3Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1995-03-04"));
        val houseHold: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("HOUSEHOLD"));
        val scanCustomer: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newSelectOp(__newScanOp(customerTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_MKTSEGMENT.$eq$eq$eq(houseHold))));
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate))));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater(constantDate))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinOp(scanCustomer, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.C_CUSTKEY, y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_CUSTKEY)));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(jo1, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => __newQ3GRPRecord(x.selectDynamic[Int](unit("L_ORDERKEY")), x.selectDynamic[Int](unit("O_ORDERDATE")), x.selectDynamic[Int](unit("O_SHIPPRIORITY"))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord]]) => {
          val agg1: this.Rep[Double] = kv1.aggs.apply(unit(0));
          val agg2: this.Rep[Double] = kv2.aggs.apply(unit(0));
          __ifThenElse(agg1.$less(agg2), unit(1), __ifThenElse(agg1.$greater(agg2), unit(-1), {
            val k1: this.Rep[Int] = kv1.key.O_ORDERDATE;
            val k2: this.Rep[Int] = kv2.key.O_ORDERDATE;
            __ifThenElse(k1.$less(k2), unit(-1), __ifThenElse(k1.$greater(k2), unit(1), unit(0)))
          }))
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord]]) => printf(unit("%d|%.4f|%s|%d\n"), kv.key.L_ORDERKEY, kv.aggs.apply(unit(0)), GenericEngine.dateToString(kv.key.O_ORDERDATE), kv.key.O_SHIPPRIORITY))), unit(10));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ3_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1995-03-04"));
        val houseHold: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("HOUSEHOLD"));
        val scanCustomer: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord](customerTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_MKTSEGMENT.$eq$eq$eq(houseHold))));
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate))));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater(constantDate))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord](scanCustomer).hashJoin[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int](scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.C_CUSTKEY, y.O_CUSTKEY))));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]](jo1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord, Double)]] = jo2.groupBy[ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => __newQ3GRPRecord(x.selectDynamic[Int](unit("L_ORDERKEY")), x.selectDynamic[Int](unit("O_ORDERDATE")), x.selectDynamic[Int](unit("O_SHIPPRIORITY")))))).mapValues[Double](__lambda(((x$10: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x$10.map[Double](__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))).sum)));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord, Double)]] = aggOp.sortBy[(Double, Int)](__lambda(((x: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord, Double)]) => Tuple2.apply[Double, Int](x._2.unary_$minus, x._1.O_ORDERDATE))));
        var rows: this.Var[Int] = __newVarNamed(unit(0), unit("rows"));
        sortOp.take(unit(10)).printRows(__lambda(((e: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord, Double)]) => printf(unit("%d|%.4f|%s|%d\n"), e._1.L_ORDERKEY, e._2, GenericEngine.dateToString(e._1.O_ORDERDATE), e._1.O_SHIPPRIORITY))), unit(-1))
      }))))
    }
  }
  override def queriesQ4Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1993-11-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1993-08-01"));
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate1).$amp$amp(x.O_ORDERDATE.$greater$eq(constantDate2)))));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_COMMITDATE.$less(x.L_RECEIPTDATE))));
        val hj: this.Rep[ch.epfl.data.dblab.queryengine.push.LeftHashSemiJoinOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newLeftHashSemiJoinOp(scanOrders, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.OptimalString]] = __newAggOp(hj, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERPRIORITY)))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => {
          val k1: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = kv1.key;
          val k2: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = kv2.key;
          k1.diff(k2)
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => printf(unit("%s|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ4_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1993-11-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1993-08-01"));
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$less(constantDate1).$amp$amp(x.O_ORDERDATE.$greater$eq(constantDate2)))));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_COMMITDATE.$less(x.L_RECEIPTDATE))));
        val hj: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](scanOrders).leftHashSemiJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))));
        val aggRes: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Int)]] = hj.groupBy[ch.epfl.data.sc.pardis.shallow.OptimalString](__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERPRIORITY))).mapValues[Int](__lambda(((x$11: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x$11.count)));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Int)]] = aggRes.sortBy[String](__lambda(((x$12: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Int)]) => x$12._1.string)));
        sortOp.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Int)]) => printf(unit("%s|%d\n"), kv._1.string, kv._2))), unit(-1))
      }))))
    }
  }
  override def queriesQ5Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = TPCHLoader.loadRegion();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1997-01-01"));
        val asia: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("ASIA"));
        val scanRegion: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_NAME.$eq$eq$eq(asia))));
        val scanNation: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val scanCustomer: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newScanOp(customerTable);
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, Int]] = __newHashJoinOp(scanRegion, scanNation)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => infix_$eq$eq(x.R_REGIONKEY, y.N_REGIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_REGIONKEY)));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, Int]] = __newHashJoinOp(jo1, scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N_NATIONKEY")), y.C_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]) => x.selectDynamic[Int](unit("N_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_NATIONKEY)));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinOp(jo2, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("C_CUSTKEY")), y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]) => x.selectDynamic[Int](unit("C_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_CUSTKEY)));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(jo3, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)));
        val jo5: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], Int]] = __newHashJoinOp(scanSupplier, jo4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => infix_$eq$eq(x.S_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY"))).$amp$amp(infix_$eq$eq(y.selectDynamic[Int](unit("N_NATIONKEY")), x.S_NATIONKEY)))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_SUPPKEY")))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], ch.epfl.data.sc.pardis.shallow.OptimalString]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => __ifThenElse(x.aggs.apply(unit(0)).$less(y.aggs.apply(unit(0))), unit(1), __ifThenElse(x.aggs.apply(unit(0)).$greater(y.aggs.apply(unit(0))), unit(-1), unit(0))))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => printf(unit("%s|%.4f\n"), kv.key.string, kv.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ5_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = TPCHLoader.loadRegion();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1997-01-01"));
        val asia: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("ASIA"));
        val scanRegion: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord](regionTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_NAME.$eq$eq$eq(asia))));
        val scanNation: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](nationTable);
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable);
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val scanCustomer: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord](customerTable);
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](supplierTable);
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord](scanRegion).hashJoin[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, Int](scanNation)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => infix_$eq$eq(x.R_REGIONKEY, y.N_REGIONKEY))));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]] = queryToJoinableQuery[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]](jo1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, Int](scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]) => x.selectDynamic[Int](unit("N_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N_NATIONKEY")), y.C_NATIONKEY))));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]] = queryToJoinableQuery[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]](jo2).hashJoin[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int](scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]) => x.selectDynamic[Int](unit("C_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("C_CUSTKEY")), y.O_CUSTKEY))));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]](jo3).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_ORDERKEY")), y.L_ORDERKEY))));
        val jo5: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](scanSupplier).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], Int](jo4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => infix_$eq$eq(x.S_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY"))).$amp$amp(infix_$eq$eq(y.selectDynamic[Int](unit("N_NATIONKEY")), x.S_NATIONKEY)))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Double)]] = jo5.groupBy[ch.epfl.data.sc.pardis.shallow.OptimalString](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME"))))).mapValues[Double](__lambda(((list: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => list.map[Double](__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))).sum)));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Double)]] = aggOp.sortBy[Double](__lambda(((x: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Double)]) => x._2.unary_$minus)));
        sortOp.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Double)]) => printf(unit("%s|%.4f\n"), kv._1.string, kv._2))), unit(-1));
        unit(())
      }))))
    }
  }
  override def queriesQ6Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1997-01-01"));
        val lineitemScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate1).$amp$amp(x.L_SHIPDATE.$less(constantDate2).$amp$amp(x.L_DISCOUNT.$greater$eq(unit(0.08)).$amp$amp(x.L_DISCOUNT.$less$eq(unit(0.1)).$amp$amp(x.L_QUANTITY.$less(unit(24)))))))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, String]] = __newAggOp(lineitemScan, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => t.L_EXTENDEDPRICE.$times(t.L_DISCOUNT).$plus(currAgg))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]]) => {
          kv.key;
          printf(unit("%.4f\n"), kv.aggs.apply(unit(0)))
        })), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ6_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1997-01-01"));
        val result: this.Rep[Double] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate1).$amp$amp(x.L_SHIPDATE.$less(constantDate2).$amp$amp(x.L_DISCOUNT.$greater$eq(unit(0.08)).$amp$amp(x.L_DISCOUNT.$less$eq(unit(0.1)).$amp$amp(x.L_QUANTITY.$less(unit(24))))))))).map[Double](__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => t.L_EXTENDEDPRICE.$times(t.L_DISCOUNT)))).sum;
        printf(unit("%.4f\n"), result);
        printf(unit("(%d rows)\n"), unit(1))
      }))))
    }
  }
  override def queriesQ7Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val usa: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("UNITED STATES"));
        val indonesia: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("INDONESIA"));
        val scanNation1: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val scanNation2: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.NestedLoopsJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newNestedLoopsJoinOp(scanNation1, scanNation2, unit("N1_"), unit("N2_"))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NAME.$eq$eq$eq(usa).$amp$amp(y.N_NAME.$eq$eq$eq(indonesia)).$bar$bar(x.N_NAME.$eq$eq$eq(indonesia).$amp$amp(y.N_NAME.$eq$eq$eq(usa))))));
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int]] = __newHashJoinOp(jo1, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("N1_N_NATIONKEY")), y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]) => x.selectDynamic[Int](unit("N1_N_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(GenericEngine.parseDate(unit("1995-01-01"))).$amp$amp(x.L_SHIPDATE.$less$eq(GenericEngine.parseDate(unit("1996-12-31")))))));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(jo2, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.L_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SUPPKEY)));
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newScanOp(ordersTable);
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinOp(jo3, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)));
        val scanCustomer: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newScanOp(customerTable);
        val jo5: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], Int]] = __newHashJoinOp(scanCustomer, jo4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => infix_$eq$eq(x.C_CUSTKEY, y.selectDynamic[Int](unit("O_CUSTKEY"))).$amp$amp(infix_$eq$eq(x.C_NATIONKEY, y.selectDynamic[Int](unit("N2_N_NATIONKEY")))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))));
        val gb: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]]) => __newQ7GRPRecord(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N1_N_NAME")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N2_N_NAME")), GenericEngine.dateToYear(x.selectDynamic[Int](unit("L_SHIPDATE")))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val so: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord]]] = __newSortOp(gb)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord]]) => {
          val k1: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord] = kv1.key;
          val k2: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord] = kv2.key;
          val r1: this.Rep[Int] = k1.SUPP_NATION.diff(k2.SUPP_NATION);
          __ifThenElse(infix_$bang$eq(r1, unit(0)), r1, {
            val r2: this.Rep[Int] = k1.CUST_NATION.diff(k2.CUST_NATION);
            __ifThenElse(infix_$bang$eq(r2, unit(0)), r2, __ifThenElse(k1.L_YEAR.$less(k2.L_YEAR), unit(-1), __ifThenElse(k1.L_YEAR.$greater(k2.L_YEAR), unit(1), unit(0))))
          })
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord]]] = __newPrintOp(so)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord]]) => printf(unit("%s|%s|%d|%.4f\n"), kv.key.SUPP_NATION.string, kv.key.CUST_NATION.string, kv.key.L_YEAR, kv.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ8Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val regionTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = TPCHLoader.loadRegion();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1995-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1996-12-31"));
        val asia: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("ASIA"));
        val indonesia: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("INDONESIA"));
        val medAnonNick: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MEDIUM ANODIZED NICKEL"));
        val scanPart: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_TYPE.$eq$eq$eq(medAnonNick))));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less$eq(constantDate2)))));
        val scanCustomer: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newScanOp(customerTable);
        val scanNation1: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val scanRegion: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]] = __newSelectOp(__newScanOp(regionTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_NAME.$eq$eq$eq(asia))));
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val scanNation2: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord, Int]] = __newHashJoinOp(scanLineitem, scanPart)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => infix_$eq$eq(x.L_PARTKEY, y.P_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinOp(jo1, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, Int]] = __newHashJoinOp(jo2, scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("O_CUSTKEY")), y.C_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], Int]] = __newHashJoinOp(scanNation1, jo3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("C_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]) => x.selectDynamic[Int](unit("C_NATIONKEY")))));
        val jo5: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]], Int]] = __newHashJoinOp(scanRegion, jo4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]) => infix_$eq$eq(x.R_REGIONKEY, y.selectDynamic[Int](unit("N_REGIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord]) => x.R_REGIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]) => x.selectDynamic[Int](unit("N_REGIONKEY")))));
        val jo6: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]], Int]] = __newHashJoinOp(scanSupplier, jo5)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]) => infix_$eq$eq(x.S_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]) => x.selectDynamic[Int](unit("L_SUPPKEY")))));
        val jo7: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]], Int]] = __newHashJoinOp(scanNation2, jo6, unit("REC1_"), unit("REC2_"))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]], Int]] = __newAggOp(jo7, unit(3))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]]]) => GenericEngine.dateToYear(x.selectDynamic[Int](unit("REC2_O_ORDERDATE"))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("REC2_L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("REC2_L_DISCOUNT"))))))), __lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.REGIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]]]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("REC1_N_NAME")).$eq$eq$eq(indonesia), currAgg.$plus(t.selectDynamic[Double](unit("REC2_L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("REC2_L_DISCOUNT"))))), currAgg))));
        val mapOp: this.Rep[ch.epfl.data.dblab.queryengine.push.MapOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]] = __newMapOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => x.aggs.update(unit(2), x.aggs.apply(unit(1)).$div(x.aggs.apply(unit(0)))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]] = __newSortOp(mapOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => __ifThenElse(x.key.$less(y.key), unit(-1), __ifThenElse(x.key.$greater(y.key), unit(1), unit(0))))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => printf(unit("%d|%.4f\n"), kv.key, kv.aggs.apply(unit(2))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ9Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val ghost: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("ghost"));
        val soNation: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val soSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val soLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val soPart: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_NAME.containsSlice(ghost))));
        val soPartsupp: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val soOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newScanOp(ordersTable);
        val hj1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord, Int]] = __newHashJoinOp(soLineitem, soPart)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => infix_$eq$eq(x.L_PARTKEY, y.P_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)));
        val hj2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int]] = __newHashJoinOp(hj1, soSupplier)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_SUPPKEY")), y.S_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]) => x.selectDynamic[Int](unit("L_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)));
        val hj3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, Int]] = __newHashJoinOp(hj2, soNation)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_NATIONKEY")), y.N_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)));
        val hj4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], Int]] = __newHashJoinOp(soPartsupp, hj3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]) => infix_$eq$eq(x.PS_PARTKEY, y.selectDynamic[Int](unit("L_PARTKEY"))).$amp$amp(infix_$eq$eq(x.PS_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY")))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]) => x.selectDynamic[Int](unit("L_PARTKEY")))));
        val hj5: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinOp(hj4, soOrders)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]] = __newAggOp(hj5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => __newQ9GRPRecord(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")), GenericEngine.dateToYear(x.selectDynamic[Int](unit("O_ORDERDATE")))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))).$minus(unit(1.0).$times(t.selectDynamic[Double](unit("PS_SUPPLYCOST"))).$times(t.selectDynamic[Double](unit("L_QUANTITY")))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]) => {
          val k1: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord] = kv1.key;
          val k2: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord] = kv2.key;
          val r: this.Rep[Int] = k1.NATION.diff(k2.NATION);
          __ifThenElse(infix_$eq$eq(r, unit(0)), __ifThenElse(k1.O_YEAR.$less(k2.O_YEAR), unit(1), __ifThenElse(k1.O_YEAR.$greater(k2.O_YEAR), unit(-1), unit(0))), r)
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]) => printf(unit("%s|%d|%.4f\n"), kv.key.NATION.string, kv.key.O_YEAR, kv.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ9_p2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val ghost: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("ghost"));
        val soNation: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val soSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val soLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val soPart: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_NAME.containsSlice(ghost))));
        val soPartsupp: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val soOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newScanOp(ordersTable);
        val hj1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(soPart, soLineitem)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)));
        val hj2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], Int]] = __newHashJoinOp(soSupplier, hj1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => infix_$eq$eq(x.S_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_SUPPKEY")))));
        val hj3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], Int]] = __newHashJoinOp(soNation, hj2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val hj4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]], Int]] = __newHashJoinOp(soPartsupp, hj3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => infix_$eq$eq(x.PS_PARTKEY, y.selectDynamic[Int](unit("L_PARTKEY"))).$amp$amp(infix_$eq$eq(x.PS_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY")))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => x.selectDynamic[Int](unit("L_PARTKEY")))));
        val hj5: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]], Int]] = __newHashJoinOp(soOrders, hj4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]) => infix_$eq$eq(x.O_ORDERKEY, y.selectDynamic[Int](unit("L_ORDERKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]], ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]] = __newAggOp(hj5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]]) => __newQ9GRPRecord(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")), GenericEngine.dateToYear(x.selectDynamic[Int](unit("O_ORDERDATE")))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))).$minus(unit(1.0).$times(t.selectDynamic[Double](unit("PS_SUPPLYCOST"))).$times(t.selectDynamic[Double](unit("L_QUANTITY")))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]) => {
          val k1: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord] = kv1.key;
          val k2: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord] = kv2.key;
          val r: this.Rep[Int] = k1.NATION.diff(k2.NATION);
          __ifThenElse(infix_$eq$eq(r, unit(0)), __ifThenElse(k1.O_YEAR.$less(k2.O_YEAR), unit(1), __ifThenElse(k1.O_YEAR.$greater(k2.O_YEAR), unit(-1), unit(0))), r)
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord]]) => printf(unit("%s|%d|%.4f\n"), kv.key.NATION.string, kv.key.O_YEAR, kv.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ9_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val ghost: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("ghost"));
        val soNation: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](nationTable);
        val soSupplier: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](supplierTable);
        val soLineitem: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable);
        val soPart: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](partTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_NAME.containsSlice(ghost))));
        val soPartsupp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord](partsuppTable);
        val soOrders: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable);
        val hj1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](soPart).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](soLineitem)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))));
        val hj2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](soSupplier).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], Int](hj1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => infix_$eq$eq(x.S_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY"))))));
        val hj3: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](soNation).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], Int](hj2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))));
        val hj4: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord](soPartsupp).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]], Int](hj3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => x.selectDynamic[Int](unit("L_PARTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => infix_$eq$eq(x.PS_PARTKEY, y.selectDynamic[Int](unit("L_PARTKEY"))).$amp$amp(infix_$eq$eq(x.PS_SUPPKEY, y.selectDynamic[Int](unit("L_SUPPKEY")))))));
        val hj5: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](soOrders).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]], Int](hj4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]) => infix_$eq$eq(x.O_ORDERKEY, y.selectDynamic[Int](unit("L_ORDERKEY"))))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord, Double)]] = hj5.groupBy[ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]]) => __newQ9GRPRecord(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")), GenericEngine.dateToYear(x.selectDynamic[Int](unit("O_ORDERDATE"))))))).mapValues[Double](__lambda(((x$13: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]]]) => x$13.map[Double](__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]]) => t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT")))).$minus(unit(1.0).$times(t.selectDynamic[Double](unit("PS_SUPPLYCOST"))).$times(t.selectDynamic[Double](unit("L_QUANTITY"))))))).sum)));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord, Double)]] = aggOp.sortBy[(String, Int)](__lambda(((x: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord, Double)]) => Tuple2.apply[String, Int](x._1.NATION.string, x._1.O_YEAR.unary_$minus))));
        sortOp.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord, Double)]) => printf(unit("%s|%d|%.4f\n"), kv._1.NATION.string, kv._1.O_YEAR, kv._2))), unit(-1))
      }))))
    }
  }
  override def queriesQ10Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1994-11-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1995-02-01"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newScanOp(customerTable);
        val so3: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val so4: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.L_RETURNFLAG, unit('R')))));
        val hj1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinOp(so4, so1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.L_ORDERKEY, y.O_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)));
        val hj2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], Int]] = __newHashJoinOp(so2, hj1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => infix_$eq$eq(x.C_CUSTKEY, y.selectDynamic[Int](unit("O_CUSTKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))));
        val hj3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], Int]] = __newHashJoinOp(so3, hj2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("C_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]]) => x.selectDynamic[Int](unit("C_NATIONKEY")))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]], ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]] = __newAggOp(hj3, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]]]) => __newQ10GRPRecord(x.selectDynamic[Int](unit("C_CUSTKEY")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_NAME")), x.selectDynamic[Double](unit("C_ACCTBAL")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_PHONE")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_ADDRESS")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_COMMENT"))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]]], currAgg: this.Rep[Double]) => currAgg.$plus(infix_asInstanceOf[Double](t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT")))))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]) => {
          val k1: this.Rep[Double] = kv1.aggs.apply(unit(0));
          val k2: this.Rep[Double] = kv2.aggs.apply(unit(0));
          __ifThenElse(k1.$less(k2), unit(1), __ifThenElse(k1.$greater(k2), unit(-1), unit(0)))
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]) => printf(unit("%d|%s|%.4f|%.2f|%s|%s|%s|%s\n"), kv.key.C_CUSTKEY, kv.key.C_NAME.string, kv.aggs.apply(unit(0)), kv.key.C_ACCTBAL, kv.key.N_NAME.string, kv.key.C_ADDRESS.string, kv.key.C_PHONE.string, kv.key.C_COMMENT.string))), unit(20));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ10_p2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1994-11-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1995-02-01"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newScanOp(customerTable);
        val so3: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newScanOp(nationTable);
        val so4: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.L_RETURNFLAG, unit('R')))));
        val hj1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(so1, so4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)));
        val hj2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], Int]] = __newHashJoinOp(so2, hj1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => infix_$eq$eq(x.C_CUSTKEY, y.selectDynamic[Int](unit("O_CUSTKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))));
        val hj3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], Int]] = __newHashJoinOp(so3, hj2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("C_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x.selectDynamic[Int](unit("C_NATIONKEY")))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]], ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]] = __newAggOp(hj3, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => __newQ10GRPRecord(x.selectDynamic[Int](unit("C_CUSTKEY")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_NAME")), x.selectDynamic[Double](unit("C_ACCTBAL")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_PHONE")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_ADDRESS")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_COMMENT"))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]], currAgg: this.Rep[Double]) => currAgg.$plus(infix_asInstanceOf[Double](t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT")))))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]] = __newSortOp(aggOp)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]) => {
          val k1: this.Rep[Double] = kv1.aggs.apply(unit(0));
          val k2: this.Rep[Double] = kv2.aggs.apply(unit(0));
          __ifThenElse(k1.$less(k2), unit(1), __ifThenElse(k1.$greater(k2), unit(-1), unit(0)))
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord]]) => printf(unit("%d|%s|%.4f|%.2f|%s|%s|%s|%s\n"), kv.key.C_CUSTKEY, kv.key.C_NAME.string, kv.aggs.apply(unit(0)), kv.key.C_ACCTBAL, kv.key.N_NAME.string, kv.key.C_ADDRESS.string, kv.key.C_PHONE.string, kv.key.C_COMMENT.string))), unit(20));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ10_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1994-11-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1995-02-01"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERDATE.$greater$eq(constantDate1).$amp$amp(x.O_ORDERDATE.$less(constantDate2)))));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord](customerTable);
        val so3: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](nationTable);
        val so4: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.L_RETURNFLAG, unit('R')))));
        val hj1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](so1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](so4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))));
        val hj2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord](so2).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], Int](hj1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => infix_$eq$eq(x.C_CUSTKEY, y.selectDynamic[Int](unit("O_CUSTKEY"))))));
        val hj3: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](so3).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], Int](hj2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x.selectDynamic[Int](unit("C_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("C_NATIONKEY"))))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord, Double)]] = hj3.groupBy[ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => __newQ10GRPRecord(x.selectDynamic[Int](unit("C_CUSTKEY")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_NAME")), x.selectDynamic[Double](unit("C_ACCTBAL")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_PHONE")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("N_NAME")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_ADDRESS")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_COMMENT")))))).mapValues[Double](__lambda(((list: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]]) => list.map[Double](__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]]) => t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))).sum)));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord, Double)]] = aggOp.sortBy[Double](__lambda(((x$15: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord, Double)]) => x$15._2.unary_$minus)));
        sortOp.take(unit(20)).printRows(__lambda(((kv: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord, Double)]) => printf(unit("%d|%s|%.4f|%.2f|%s|%s|%s|%s\n"), kv._1.C_CUSTKEY, kv._1.C_NAME.string, kv._2, kv._1.C_ACCTBAL, kv._1.N_NAME.string, kv._1.C_ADDRESS.string, kv._1.C_PHONE.string, kv._1.C_COMMENT.string))), unit(-1));
        unit(())
      }))))
    }
  }
  override def queriesQ11Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val uk: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("UNITED KINGDOM"));
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val scanNation: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newSelectOp(__newScanOp(nationTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NAME.$eq$eq$eq(uk))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int]] = __newHashJoinOp(scanNation, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.N_NATIONKEY, y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val scanPartsupp: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, Int]] = __newHashJoinOp(jo1, scanPartsupp)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.PS_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_SUPPKEY)));
        val wo: this.Rep[ch.epfl.data.dblab.queryengine.push.WindowOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], Int, Double]] = __newWindowOp(jo2)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))))(__lambda(((x: this.Rep[scala.collection.mutable.Set[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]) => x.foldLeft[Double](unit(0.0))(__lambda(((cnt: this.Rep[Double], e: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => cnt.$plus(e.selectDynamic[Double](unit("PS_SUPPLYCOST")).$times(e.selectDynamic[Int](unit("PS_AVAILQTY"))))))))));
        wo.open();
        val vo: this.Rep[ch.epfl.data.dblab.queryengine.push.ViewOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]] = __newViewOp(wo);
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double], String]] = __newAggOp(vo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]], currAgg: this.Rep[Double]) => currAgg.$plus(t.wnd))));
        val total: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]] = __newSubquerySingleResult(aggOp).getResult;
        vo.reset();
        val so: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]] = __newSelectOp(vo)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]) => {
          total.key;
          x.wnd.$greater(total.aggs.apply(unit(0)).$times(unit(1.0E-4)))
        })));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]] = __newSortOp(so)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]], y: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]) => __ifThenElse(x.wnd.$greater(y.wnd), unit(-1), __ifThenElse(x.wnd.$less(y.wnd), unit(1), unit(0))))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]) => printf(unit("%d|%.2f\n"), kv.key, kv.wnd))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ11_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val uk: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("UNITED KINGDOM"));
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](supplierTable);
        val scanNation: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](nationTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NAME.$eq$eq$eq(uk))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](scanNation).hashJoin[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int](scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.N_NATIONKEY, y.S_NATIONKEY))));
        val scanPartsupp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord](partsuppTable);
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]] = queryToJoinableQuery[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]](jo1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, Int](scanPartsupp)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.PS_SUPPKEY))));
        val wo: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(Int, Double)]] = jo2.groupBy[Int](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_PARTKEY"))))).mapValues[Double](__lambda(((list: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]]) => list.map[Double](__lambda(((e: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => e.selectDynamic[Double](unit("PS_SUPPLYCOST")).$times(e.selectDynamic[Int](unit("PS_AVAILQTY")))))).sum))).materialize;
        val total: this.Rep[Double] = wo.map[Double](__lambda(((x$16: this.Rep[(Int, Double)]) => x$16._2))).sum;
        val so: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(Int, Double)]] = wo.filter(__lambda(((x$17: this.Rep[(Int, Double)]) => x$17._2.$greater(total.$times(unit(1.0E-4))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(Int, Double)]] = so.sortBy[Double](__lambda(((x$18: this.Rep[(Int, Double)]) => x$18._2.unary_$minus)));
        sortOp.printRows(__lambda(((kv: this.Rep[(Int, Double)]) => printf(unit("%d|%.2f\n"), kv._1, kv._2))), unit(-1))
      }))))
    }
  }
  override def queriesQ12Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val mail: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MAIL"));
        val ship: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SHIP"));
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1995-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1994-01-01"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newScanOp(ordersTable);
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_RECEIPTDATE.$less(constantDate).$amp$amp(x.L_COMMITDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(x.L_COMMITDATE)).$amp$amp(x.L_COMMITDATE.$less(x.L_RECEIPTDATE)).$amp$amp(x.L_RECEIPTDATE.$greater$eq(constantDate2)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(mail).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(ship))))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)));
        val URGENT: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("1-URGENT"));
        val HIGH: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("2-HIGH"));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.sc.pardis.shallow.OptimalString]] = __newAggOp(jo, unit(2))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("L_SHIPMODE")))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(URGENT).$bar$bar(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(HIGH)), currAgg.$plus(unit(1)), currAgg))), __lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(URGENT).$amp$amp(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(HIGH)), currAgg.$plus(unit(1)), currAgg))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => x.key.diff(y.key))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => printf(unit("%s|%.0f|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0)), kv.aggs.apply(unit(1))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ12_p2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val mail: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MAIL"));
        val ship: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SHIP"));
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1995-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1994-01-01"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newScanOp(ordersTable);
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_RECEIPTDATE.$less(constantDate).$amp$amp(x.L_COMMITDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(x.L_COMMITDATE)).$amp$amp(x.L_COMMITDATE.$less(x.L_RECEIPTDATE)).$amp$amp(x.L_RECEIPTDATE.$greater$eq(constantDate2)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(mail).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(ship))))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.MergeJoinOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newMergeJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.O_ORDERKEY.$minus(y.L_ORDERKEY))));
        val URGENT: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("1-URGENT"));
        val HIGH: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("2-HIGH"));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.sc.pardis.shallow.OptimalString]] = __newAggOp(jo, unit(2))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("L_SHIPMODE")))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(URGENT).$bar$bar(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(HIGH)), currAgg.$plus(unit(1)), currAgg))), __lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(URGENT).$amp$amp(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(HIGH)), currAgg.$plus(unit(1)), currAgg))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => x.key.diff(y.key))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => printf(unit("%s|%.0f|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0)), kv.aggs.apply(unit(1))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ12_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val mail: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MAIL"));
        val ship: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SHIP"));
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1995-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1994-01-01"));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_RECEIPTDATE.$less(constantDate).$amp$amp(x.L_COMMITDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(x.L_COMMITDATE)).$amp$amp(x.L_COMMITDATE.$less(x.L_RECEIPTDATE)).$amp$amp(x.L_RECEIPTDATE.$greater$eq(constantDate2)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(mail).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(ship))))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable)).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](so2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))));
        val URGENT: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("1-URGENT"));
        val HIGH: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("2-HIGH"));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]] = jo.groupBy[ch.epfl.data.sc.pardis.shallow.OptimalString](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("L_SHIPMODE"))))).mapValues[Array[Int]](__lambda(((list: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => Array.apply(list.filter(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(URGENT).$bar$bar(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(HIGH))))).count, list.filter(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(URGENT).$amp$amp(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(HIGH))))).count))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]] = aggOp.sortBy[String](__lambda(((x$19: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]) => x$19._1.string)));
        sortOp.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]) => printf(unit("%s|%d|%d\n"), kv._1.string, kv._2.apply(unit(0)), kv._2.apply(unit(1))))), unit(-1))
      }))))
    }
  }
  override def queriesQ12_functional_p2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val mail: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MAIL"));
        val ship: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SHIP"));
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1995-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1994-01-01"));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_RECEIPTDATE.$less(constantDate).$amp$amp(x.L_COMMITDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(constantDate)).$amp$amp(x.L_SHIPDATE.$less(x.L_COMMITDATE)).$amp$amp(x.L_COMMITDATE.$less(x.L_RECEIPTDATE)).$amp$amp(x.L_RECEIPTDATE.$greater$eq(constantDate2)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(mail).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(ship))))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable)).mergeJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](so2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.O_ORDERKEY.$minus(y.L_ORDERKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.O_ORDERKEY, y.L_ORDERKEY))));
        val URGENT: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("1-URGENT"));
        val HIGH: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("2-HIGH"));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]] = jo.groupBy[ch.epfl.data.sc.pardis.shallow.OptimalString](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("L_SHIPMODE"))))).mapValues[Array[Int]](__lambda(((list: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => {
          var x0: this.Var[Int] = __newVarNamed(unit(0), unit("x0"));
          var x1: this.Var[Int] = __newVarNamed(unit(0), unit("x1"));
          list.foreach(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => {
            __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(URGENT).$bar$bar(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$eq$eq(HIGH)), __assign(x0, __readVar(x0).$plus(unit(1))), unit(()));
            __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(URGENT).$amp$amp(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("O_ORDERPRIORITY")).$eq$bang$eq(HIGH)), __assign(x1, __readVar(x1).$plus(unit(1))), unit(()))
          })));
          Array.apply(__readVar(x0), __readVar(x1))
        })));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]] = aggOp.sortBy[String](__lambda(((x$20: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]) => x$20._1.string)));
        sortOp.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.sc.pardis.shallow.OptimalString, Array[Int])]) => printf(unit("%s|%d|%d\n"), kv._1.string, kv._2.apply(unit(0)), kv._2.apply(unit(1))))), unit(-1))
      }))))
    }
  }
  override def queriesQ13Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val aggArray: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord]] = __newArray[ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord](customerTable.length);
      intWrapper(unit(0)).until(customerTable.length).foreach[Unit](__lambda(((i: this.Rep[Int]) => aggArray.update(i, __newQ13IntRecord(unit(0))))));
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val unusual: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("unusual"));
        val packages: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("packages"));
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => {
          val idxu: this.Rep[Int] = x.O_COMMENT.indexOfSlice(unusual, unit(0));
          val idxp: this.Rep[Int] = x.O_COMMENT.indexOfSlice(packages, idxu);
          infix_$bang$eq(idxu, unit(-1)).$amp$amp(infix_$bang$eq(idxp, unit(-1))).unary_$bang
        })));
        val aggOp1: this.Rep[ch.epfl.data.dblab.queryengine.push.MapOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newMapOp(scanOrders)(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => {
          val ev$1: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord] = aggArray.apply(t.O_CUSTKEY);
          ev$1.count_$eq(ev$1.count.$plus(unit(1)))
        })));
        aggOp1.run();
        val aggScan: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord]] = __newScanOp(aggArray);
        val aggOp2: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord, Int]] = __newAggOp(aggScan, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord]) => x.count)))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]] = __newSortOp(aggOp2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => __ifThenElse(x.aggs.apply(unit(0)).$less(y.aggs.apply(unit(0))), unit(1), __ifThenElse(x.aggs.apply(unit(0)).$greater(y.aggs.apply(unit(0))), unit(-1), __ifThenElse(x.key.$less(y.key), unit(1), __ifThenElse(x.key.$greater(y.key), unit(-1), unit(0))))))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => printf(unit("%d|%.0f\n"), kv.key, kv.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ14Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val promo: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("PROMO"));
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1994-04-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1994-03-01"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newScanOp(partTable);
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate2).$amp$amp(x.L_SHIPDATE.$less(constantDate)))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], String]] = __newAggOp(jo, unit(3))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_TYPE")).startsWith(promo), currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))), currAgg))), __lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val mapOp: this.Rep[ch.epfl.data.dblab.queryengine.push.MapOp[ch.epfl.data.dblab.queryengine.AGGRecord[String]]] = __newMapOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]]) => {
          kv.key;
          kv.aggs.update(unit(2), kv.aggs.apply(unit(0)).$times(unit(100)).$div(kv.aggs.apply(unit(1))))
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[String]]] = __newPrintOp(mapOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]]) => printf(unit("%.4f\n"), kv.aggs.apply(unit(2))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ14_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val promo: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("PROMO"));
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1994-04-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1994-03-01"));
        val joinResult: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](partTable)).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate2).$amp$amp(x.L_SHIPDATE.$less(constantDate))))))(__lambda(((x$21: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x$21.P_PARTKEY)))(__lambda(((x$22: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$22.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))));
        var agg1: this.Var[Double] = __newVarNamed(unit(0.0), unit("agg1"));
        var agg2: this.Var[Double] = __newVarNamed(unit(0.0), unit("agg2"));
        joinResult.foreach(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => {
          val e: this.Rep[Double] = t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))));
          val x: this.Rep[Double] = __ifThenElse(t.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_TYPE")).startsWith(promo), e, unit(0.0));
          __assign(agg1, __readVar(agg1).$plus(x));
          __assign(agg2, __readVar(agg2).$plus(e))
        })));
        val result: this.Rep[Double] = __readVar(agg1).$times(unit(100)).$div(__readVar(agg2));
        printf(unit("%.4f\n"), result);
        printf(unit("(%d rows)\n"), unit(1));
        unit(())
      }))))
    }
  }
  override def queriesQ15Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate: this.Rep[Int] = GenericEngine.parseDate(unit("1993-09-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1993-12-01"));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate).$amp$amp(x.L_SHIPDATE.$less(constantDate2)))));
        val aggOp1: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newAggOp(scanLineitem, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SUPPKEY)))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => currAgg.$plus(t.L_EXTENDEDPRICE.$times(unit(1.0).$minus(t.L_DISCOUNT))))));
        aggOp1.open();
        val vo: this.Rep[ch.epfl.data.dblab.queryengine.push.ViewOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]] = __newViewOp(aggOp1);
        val aggOp2: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int], String]] = __newAggOp(vo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => unit("MAXREVENUE"))))(__lambda(((t: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]], currAgg: this.Rep[Double]) => {
          t.key;
          __ifThenElse(currAgg.$less(t.aggs.apply(unit(0))), t.aggs.apply(unit(0)), currAgg)
        })));
        aggOp2.open();
        val maxRevenue: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]] = __newSubquerySingleResult(aggOp2).getResult;
        vo.reset();
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.queryengine.AGGRecord[Int], Int]] = __newHashJoinOp(scanSupplier, vo)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => {
          maxRevenue.key;
          infix_$eq$eq(x.S_SUPPKEY, y.key).$amp$amp(infix_$eq$eq(y.aggs.apply(unit(0)), maxRevenue.aggs.apply(unit(0))))
        })))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => x.key)));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.queryengine.AGGRecord[Int]]]] = __newPrintOp(jo)(__lambda(((kv: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, ch.epfl.data.dblab.queryengine.AGGRecord[Int]]]) => printf(unit("%d|%s|%s|%s|%.4f\n"), kv.selectDynamic[Int](unit("S_SUPPKEY")), kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_ADDRESS")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_PHONE")).string, kv.selectDynamic[Array[Double]](unit("aggs")).apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ16Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val str1: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Customer"));
        val str2: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Complaints"));
        val brand21: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#21"));
        val promoPlated: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("PROMO PLATED"));
        val partScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_BRAND.startsWith(brand21).unary_$bang.$amp$amp(x.P_TYPE.startsWith(promoPlated).unary_$bang).$amp$amp(infix_$eq$eq(x.P_SIZE, unit(23)).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(3))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(33))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(29))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(40))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(27))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(22))).$bar$bar(infix_$eq$eq(x.P_SIZE, unit(4)))))));
        val partsuppScan: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val supplierScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newSelectOp(__newScanOp(supplierTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => {
          val idxu: this.Rep[Int] = x.S_COMMENT.indexOfSlice(str1, unit(0));
          val idxp: this.Rep[Int] = x.S_COMMENT.indexOfSlice(str2, idxu);
          infix_$bang$eq(idxu, unit(-1)).$amp$amp(infix_$bang$eq(idxp, unit(-1)))
        })));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, Int]] = __newHashJoinOp(partScan, partsuppScan)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => infix_$eq$eq(x.P_PARTKEY, y.PS_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_PARTKEY)));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinAnti[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int]] = __newHashJoinAnti(jo1, supplierScan)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("PS_SUPPKEY")), y.S_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => {
          x.selectDynamic[Int](unit("PS_SUPPKEY"));
          __newQ16GRPRecord1(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")), x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_TYPE")), x.selectDynamic[Int](unit("P_SIZE")), x.selectDynamic[Int](unit("PS_SUPPKEY")))
        })))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]], currAgg: this.Rep[Double]) => currAgg)));
        val aggOp2: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1], ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2]] = __newAggOp(aggOp, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1]]) => {
          x.key.PS_SUPPKEY;
          __newQ16GRPRecord2(x.key.P_BRAND, x.key.P_TYPE, x.key.P_SIZE)
        })))(__lambda(((t: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1]], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2]]] = __newSortOp(aggOp2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2]]) => __ifThenElse(x.aggs.apply(unit(0)).$less(y.aggs.apply(unit(0))), unit(1), __ifThenElse(x.aggs.apply(unit(0)).$greater(y.aggs.apply(unit(0))), unit(-1), {
          var res: this.Var[Int] = __newVarNamed(x.key.P_BRAND.diff(y.key.P_BRAND), unit("res"));
          __ifThenElse(infix_$eq$eq(__readVar(res), unit(0)), {
            __assign(res, x.key.P_TYPE.diff(y.key.P_TYPE));
            __ifThenElse(infix_$eq$eq(__readVar(res), unit(0)), __assign(res, x.key.P_SIZE.$minus(y.key.P_SIZE)), unit(()))
          }, unit(()));
          __readVar(res)
        })))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2]]] = __newPrintOp(sortOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2]]) => printf(unit("%s|%s|%d|%.0f\n"), x.key.P_BRAND.string, x.key.P_TYPE.string, x.key.P_SIZE, x.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ17Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val medbag: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED BAG"));
        val brand15: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#15"));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val scanPart: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_CONTAINER.$eq$eq$eq(medbag).$amp$amp(x.P_BRAND.$eq$eq$eq(brand15)))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord, Int]] = __newHashJoinOp(scanLineitem, scanPart)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => infix_$eq$eq(x.L_PARTKEY, y.P_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)));
        val wo: this.Rep[ch.epfl.data.dblab.queryengine.push.WindowOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], Int, Double]] = __newWindowOp(jo)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]) => x.selectDynamic[Int](unit("L_PARTKEY")))))(__lambda(((x: this.Rep[scala.collection.mutable.Set[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]]) => {
          val sum: this.Rep[Double] = x.foldLeft[Double](unit(0.0))(__lambda(((cnt: this.Rep[Double], e: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]) => cnt.$plus(e.selectDynamic[Double](unit("L_QUANTITY"))))));
          val count: this.Rep[Int] = x.size;
          val avg: this.Rep[Double] = unit(0.2).$times(sum.$div(count));
          x.foldLeft[Double](unit(0.0))(__lambda(((cnt: this.Rep[Double], e: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]) => __ifThenElse(e.selectDynamic[Double](unit("L_QUANTITY")).$less(avg), cnt.$plus(e.selectDynamic[Double](unit("L_EXTENDEDPRICE"))), cnt)))).$div(unit(7.0))
        })));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double], String]] = __newAggOp(wo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.dblab.queryengine.WindowRecord[Int, Double]], currAgg: this.Rep[Double]) => currAgg.$plus(t.wnd))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]]) => {
          kv.key;
          printf(unit("%.6f\n"), kv.aggs.apply(unit(0)))
        })), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ18Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val scanOrders: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newScanOp(ordersTable);
        val scanCustomer: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newScanOp(customerTable);
        val scanLineitem1: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val aggOp1: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]] = __newSelectOp(__newAggOp(scanLineitem1, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], currAgg: this.Rep[Double]) => currAgg.$plus(t.L_QUANTITY)))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => x.aggs.apply(unit(0)).$greater(unit(300)))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.queryengine.AGGRecord[Int], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinOp(aggOp1, scanOrders)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => {
          x.aggs;
          infix_$eq$eq(y.O_ORDERKEY, x.key)
        })))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[Int]]) => x.key)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[Int], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, Int]] = __newHashJoinOp(jo1, scanCustomer)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[Int], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => {
          x.selectDynamic[Nothing](unit("aggs"));
          infix_$eq$eq(x.selectDynamic[Int](unit("O_CUSTKEY")), y.C_CUSTKEY)
        })))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[Int], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x.selectDynamic[Int](unit("O_CUSTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)));
        val aggOp2: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[Int], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[Int], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]) => {
          x.selectDynamic[Nothing](unit("aggs"));
          __newQ18GRPRecord(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_NAME")), x.selectDynamic[Int](unit("C_CUSTKEY")), x.selectDynamic[Int](unit("O_ORDERKEY")), x.selectDynamic[Int](unit("O_ORDERDATE")), x.selectDynamic[Double](unit("O_TOTALPRICE")))
        })))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[Int], ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]], currAgg: this.Rep[Double]) => {
          t.selectDynamic[Nothing](unit("aggs"));
          currAgg.$plus(t.selectDynamic[Array[Double]](unit("aggs")).apply(unit(0)))
        })));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord]]] = __newSortOp(aggOp2)(__lambda(((kv1: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord]], kv2: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord]]) => {
          val k1: this.Rep[Double] = kv1.key.O_TOTALPRICE;
          val k2: this.Rep[Double] = kv2.key.O_TOTALPRICE;
          __ifThenElse(k1.$less(k2), unit(1), __ifThenElse(k1.$greater(k2), unit(-1), {
            val d1: this.Rep[Int] = kv1.key.O_ORDERDATE;
            val d2: this.Rep[Int] = kv2.key.O_ORDERDATE;
            __ifThenElse(d1.$less(d2), unit(-1), __ifThenElse(d1.$greater(d2), unit(1), unit(0)))
          }))
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord]]) => {
          kv.aggs;
          printf(unit("%s|%d|%d|%s|%.2f|%.2f\n"), kv.key.C_NAME.string, kv.key.C_CUSTKEY, kv.key.O_ORDERKEY, GenericEngine.dateToString(kv.key.O_ORDERDATE), kv.key.O_TOTALPRICE, kv.aggs.apply(unit(0)))
        })), unit(100));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ18_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val aggOp1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.schema.DynamicDataRow]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).groupBy[Int](__lambda(((x$23: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$23.L_ORDERKEY))).mapValues[Double](__lambda(((x$24: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x$24.map[Double](__lambda(((x$25: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x$25.L_QUANTITY))).sum))).filter(__lambda(((x$26: this.Rep[(Int, Double)]) => x$26._2.$greater(unit(300))))).map[ch.epfl.data.dblab.schema.DynamicDataRow](__lambda(((x: this.Rep[(Int, Double)]) => DynamicDataRow.apply(unit("AggRec"))(Tuple2.apply[String, Int](unit("key"), x._1), Tuple2.apply[String, Double](unit("agg"), x._2)))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.schema.DynamicDataRow](aggOp1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int](Query.apply[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord](ordersTable))(__lambda(((x$27: this.Rep[ch.epfl.data.dblab.schema.DynamicDataRow]) => x$27.selectDynamic[Int](unit("key")))))(__lambda(((x$28: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x$28.O_ORDERKEY)))(__lambda(((x$29: this.Rep[ch.epfl.data.dblab.schema.DynamicDataRow], x$30: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x$29.selectDynamic[Int](unit("key")), x$30.O_ORDERKEY))));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]] = queryToJoinableQuery[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]](jo1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, Int](Query.apply[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord](customerTable))(__lambda(((x$31: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]]) => x$31.selectDynamic[Int](unit("O_CUSTKEY")))))(__lambda(((x$32: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x$32.C_CUSTKEY)))(__lambda(((x$33: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]], x$34: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => infix_$eq$eq(x$33.selectDynamic[Int](unit("O_CUSTKEY")), x$34.C_CUSTKEY))));
        val aggOp2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord, Double)]] = jo2.groupBy[ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]) => __newQ18GRPRecord(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("C_NAME")), x.selectDynamic[Int](unit("C_CUSTKEY")), x.selectDynamic[Int](unit("O_ORDERKEY")), x.selectDynamic[Int](unit("O_ORDERDATE")), x.selectDynamic[Double](unit("O_TOTALPRICE")))))).mapValues[Double](__lambda(((x$35: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]]) => x$35.map[Double](__lambda(((x$36: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.schema.DynamicDataRow, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]]) => x$36.selectDynamic[Double](unit("agg"))))).sum)));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord, Double)]] = aggOp2.sortBy[(Double, Int)](__lambda(((t: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord, Double)]) => Tuple2.apply[Double, Int](t._1.O_TOTALPRICE.unary_$minus, t._1.O_ORDERDATE))));
        sortOp.printRows(__lambda(((kv: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord, Double)]) => printf(unit("%s|%d|%d|%s|%.2f|%.2f\n"), kv._1.C_NAME.string, kv._1.C_CUSTKEY, kv._1.O_ORDERKEY, GenericEngine.dateToString(kv._1.O_ORDERDATE), kv._1.O_TOTALPRICE, kv._2))), unit(100));
        unit(())
      }))))
    }
  }
  override def queriesQ19Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val Brand31: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#31"));
        val Brand43: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#43"));
        val SMBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM BOX"));
        val SMCASE: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM CASE"));
        val SMPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM PACK"));
        val SMPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM PKG"));
        val MEDBAG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED BAG"));
        val MEDBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED BOX"));
        val MEDPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED PACK"));
        val MEDPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED PKG"));
        val LGBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG BOX"));
        val LGCASE: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG CASE"));
        val LGPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG PACK"));
        val LGPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG PKG"));
        val DELIVERINPERSON: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("DELIVER IN PERSON"));
        val AIR: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AIR"));
        val AIRREG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AIRREG"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_SIZE.$greater$eq(unit(1)).$amp$amp(x.P_SIZE.$less$eq(unit(5)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand31)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(SMBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(10)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(MEDBAG).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDBOX)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(15)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(LGBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPKG)))))));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_QUANTITY.$less$eq(unit(36)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(26))).$bar$bar(x.L_QUANTITY.$less$eq(unit(25)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(15)))).$bar$bar(x.L_QUANTITY.$less$eq(unit(14)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(4)))).$amp$amp(x.L_SHIPINSTRUCT.$eq$eq$eq(DELIVERINPERSON)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(AIR).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(AIRREG))))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]] = __newSelectOp(__newHashJoinOp(so2, so1)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => infix_$eq$eq(y.P_PARTKEY, x.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand31).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMBOX).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(4))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(14))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(5))).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDBAG).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDBOX)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(15))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(25))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(10)))).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGBOX).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(26))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(36))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(15)))))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord], String]] = __newAggOp(jo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, ch.epfl.data.dblab.experimentation.tpch.PARTRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]]) => {
          kv.key;
          printf(unit("%.4f\n"), kv.aggs.apply(unit(0)))
        })), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ19_p2Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val Brand31: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#31"));
        val Brand43: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#43"));
        val SMBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM BOX"));
        val SMCASE: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM CASE"));
        val SMPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM PACK"));
        val SMPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM PKG"));
        val MEDBAG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED BAG"));
        val MEDBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED BOX"));
        val MEDPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED PACK"));
        val MEDPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED PKG"));
        val LGBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG BOX"));
        val LGCASE: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG CASE"));
        val LGPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG PACK"));
        val LGPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG PKG"));
        val DELIVERINPERSON: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("DELIVER IN PERSON"));
        val AIR: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AIR"));
        val AIRREG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AIRREG"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_SIZE.$greater$eq(unit(1)).$amp$amp(x.P_SIZE.$less$eq(unit(5)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand31)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(SMBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(10)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(MEDBAG).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDBOX)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(15)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(LGBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPKG)))))));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_QUANTITY.$less$eq(unit(36)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(26))).$bar$bar(x.L_QUANTITY.$less$eq(unit(25)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(15)))).$bar$bar(x.L_QUANTITY.$less$eq(unit(14)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(4)))).$amp$amp(x.L_SHIPINSTRUCT.$eq$eq$eq(DELIVERINPERSON)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(AIR).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(AIRREG))))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = __newSelectOp(__newHashJoinOp(so1, so2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand31).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMBOX).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(4))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(14))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(5))).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDBAG).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDBOX)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(15))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(25))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(10)))).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGBOX).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(26))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(36))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(15)))))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], String]] = __newAggOp(jo, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => unit("Total"))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[String]]] = __newPrintOp(aggOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]]) => {
          kv.key;
          printf(unit("%.4f\n"), kv.aggs.apply(unit(0)))
        })), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ19_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val Brand31: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#31"));
        val Brand43: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("Brand#43"));
        val SMBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM BOX"));
        val SMCASE: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM CASE"));
        val SMPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM PACK"));
        val SMPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("SM PKG"));
        val MEDBAG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED BAG"));
        val MEDBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED BOX"));
        val MEDPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED PACK"));
        val MEDPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MED PKG"));
        val LGBOX: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG BOX"));
        val LGCASE: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG CASE"));
        val LGPACK: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG PACK"));
        val LGPKG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("LG PKG"));
        val DELIVERINPERSON: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("DELIVER IN PERSON"));
        val AIR: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AIR"));
        val AIRREG: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("AIRREG"));
        val so1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](partTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_SIZE.$greater$eq(unit(1)).$amp$amp(x.P_SIZE.$less$eq(unit(5)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand31)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(SMBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(SMPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(10)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(MEDBAG).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDBOX)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(MEDPKG)))).$bar$bar(x.P_SIZE.$less$eq(unit(15)).$amp$amp(x.P_BRAND.$eq$eq$eq(Brand43)).$amp$amp(x.P_CONTAINER.$eq$eq$eq(LGBOX).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGCASE)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPACK)).$bar$bar(x.P_CONTAINER.$eq$eq$eq(LGPKG)))))));
        val so2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_QUANTITY.$less$eq(unit(36)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(26))).$bar$bar(x.L_QUANTITY.$less$eq(unit(25)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(15)))).$bar$bar(x.L_QUANTITY.$less$eq(unit(14)).$amp$amp(x.L_QUANTITY.$greater$eq(unit(4)))).$amp$amp(x.L_SHIPINSTRUCT.$eq$eq$eq(DELIVERINPERSON)).$amp$amp(x.L_SHIPMODE.$eq$eq$eq(AIR).$bar$bar(x.L_SHIPMODE.$eq$eq$eq(AIRREG))))));
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](so1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](so2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.P_PARTKEY, y.L_PARTKEY)))).filter(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand31).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMBOX).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(SMPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(4))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(14))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(5))).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDBAG).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDBOX)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(MEDPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(15))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(25))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(10)))).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_BRAND")).$eq$eq$eq(Brand43).$amp$amp(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGBOX).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGCASE)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGPACK)).$bar$bar(x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("P_CONTAINER")).$eq$eq$eq(LGPKG))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$greater$eq(unit(26))).$amp$amp(x.selectDynamic[Double](unit("L_QUANTITY")).$less$eq(unit(36))).$amp$amp(x.selectDynamic[Int](unit("P_SIZE")).$less$eq(unit(15)))))));
        val result: this.Rep[Double] = jo.map[Double](__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => t.selectDynamic[Double](unit("L_EXTENDEDPRICE")).$times(unit(1.0).$minus(t.selectDynamic[Double](unit("L_DISCOUNT"))))))).sum;
        printf(unit("%.4f\n"), result);
        printf(unit("(%d rows)\n"), unit(1))
      }))))
    }
  }
  override def queriesQ20Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1997-01-01"));
        val jordan: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("JORDAN"));
        val azure: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("azure"));
        val scanPart: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = __newSelectOp(__newScanOp(partTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_NAME.startsWith(azure))));
        val scanPartsupp: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = __newScanOp(partsuppTable);
        val scanSupplier: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val scanNation: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newSelectOp(__newScanOp(nationTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NAME.$eq$eq$eq(jordan))));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate1).$amp$amp(x.L_SHIPDATE.$less(constantDate2)))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, Int]] = __newHashJoinOp(scanPart, scanPartsupp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => infix_$eq$eq(x.P_PARTKEY, y.PS_PARTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_PARTKEY)));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(jo1, scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("PS_PARTKEY")), y.L_PARTKEY).$amp$amp(infix_$eq$eq(x.selectDynamic[Int](unit("PS_SUPPKEY")), y.L_SUPPKEY)))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord]] = __newAggOp(jo2, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => __newQ20GRPRecord(x.selectDynamic[Int](unit("PS_PARTKEY")), x.selectDynamic[Int](unit("PS_SUPPKEY")), x.selectDynamic[Int](unit("PS_AVAILQTY"))))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], currAgg: this.Rep[Double]) => currAgg.$plus(t.selectDynamic[Double](unit("L_QUANTITY"))))));
        val selOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord]]] = __newSelectOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord]]) => {
          x.key.PS_PARTKEY;
          x.key.PS_SUPPKEY;
          x.key.PS_AVAILQTY.$greater(unit(0.5).$times(x.aggs.apply(unit(0))))
        })));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int]] = __newHashJoinOp(selOp, scanSupplier)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.key.PS_SUPPKEY, y.S_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord]]) => x.key.PS_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], Int]] = __newHashJoinOp(scanNation, jo3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]] = __newSortOp(jo4)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).diff(y.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME"))))));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]) => printf(unit("%s|%s\n"), kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_ADDRESS")).string))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ20_functionalObject(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val partTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = TPCHLoader.loadPart();
      val partsuppTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]] = TPCHLoader.loadPartsupp();
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val constantDate1: this.Rep[Int] = GenericEngine.parseDate(unit("1996-01-01"));
        val constantDate2: this.Rep[Int] = GenericEngine.parseDate(unit("1997-01-01"));
        val jordan: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("JORDAN"));
        val azure: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("azure"));
        val scanPart: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](partTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_NAME.startsWith(azure))));
        val scanNation: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](nationTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NAME.$eq$eq$eq(jordan))));
        val scanLineitem: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = Query.apply[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord](lineitemTable).filter(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SHIPDATE.$greater$eq(constantDate1).$amp$amp(x.L_SHIPDATE.$less(constantDate2)))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.PARTRecord](scanPart).hashJoin[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord, Int](Query.apply[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord](partsuppTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord]) => x.P_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => x.PS_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]) => infix_$eq$eq(x.P_PARTKEY, y.PS_PARTKEY))));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]] = queryToJoinableQuery[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]](jo1).hashJoin[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int](scanLineitem)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]]) => x.selectDynamic[Int](unit("PS_PARTKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_PARTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("PS_PARTKEY")), y.L_PARTKEY).$amp$amp(infix_$eq$eq(x.selectDynamic[Int](unit("PS_SUPPKEY")), y.L_SUPPKEY)))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[(ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, Double)]] = jo2.groupBy[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord](__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => __newQ20GRPRecord(x.selectDynamic[Int](unit("PS_PARTKEY")), x.selectDynamic[Int](unit("PS_SUPPKEY")), x.selectDynamic[Int](unit("PS_AVAILQTY")))))).mapValues[Double](__lambda(((x$37: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x$37.map[Double](__lambda(((x$38: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.PARTRecord, ch.epfl.data.dblab.experimentation.tpch.PARTSUPPRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x$38.selectDynamic[Double](unit("L_QUANTITY"))))).sum)));
        val selOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord]] = aggOp.filter(__lambda(((x: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, Double)]) => x._1.PS_AVAILQTY.$greater(unit(0.5).$times(x._2))))).map[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord](__lambda(((x: this.Rep[(ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, Double)]) => x._1)));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord](selOp).hashJoin[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int](Query.apply[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord](supplierTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord]) => x.PS_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_SUPPKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.PS_SUPPKEY, y.S_SUPPKEY))));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]] = queryToJoinableQuery[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord](scanNation).hashJoin[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], Int](jo3)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_NATIONKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => infix_$eq$eq(x.N_NATIONKEY, y.selectDynamic[Int](unit("S_NATIONKEY"))))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.monad.Query[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]] = jo4.sortBy[String](__lambda(((x$39: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]) => x$39.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).string)));
        sortOp.printRows(__lambda(((kv: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]]) => printf(unit("%s|%s\n"), kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")).string, kv.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_ADDRESS")).string))), unit(-1));
        unit(())
      }))))
    }
  }
  override def queriesQ21Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val lineitemTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = TPCHLoader.loadLineitem();
      val supplierTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = TPCHLoader.loadSupplier();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      val nationTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = TPCHLoader.loadNation();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val morocco: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("MOROCCO"));
        val lineitemScan1: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_RECEIPTDATE.$greater(x.L_COMMITDATE))));
        val lineitemScan2: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newScanOp(lineitemTable);
        val lineitemScan3: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]] = __newSelectOp(__newScanOp(lineitemTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_RECEIPTDATE.$greater(x.L_COMMITDATE))));
        val supplierScan: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]] = __newScanOp(supplierTable);
        val nationScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]] = __newSelectOp(__newScanOp(nationTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NAME.$eq$eq$eq(morocco))));
        val ordersScan: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newSelectOp(__newScanOp(ordersTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.O_ORDERSTATUS, unit('F')))));
        val jo1: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord, Int]] = __newHashJoinOp(nationScan, supplierScan)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => infix_$eq$eq(x.N_NATIONKEY, y.S_NATIONKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord]) => x.N_NATIONKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]) => x.S_NATIONKEY)));
        val jo2: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinOp(jo1, lineitemScan1)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("S_SUPPKEY")), y.L_SUPPKEY))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord]]) => x.selectDynamic[Int](unit("S_SUPPKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_SUPPKEY)));
        val jo3: this.Rep[ch.epfl.data.dblab.queryengine.push.LeftHashSemiJoinOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newLeftHashSemiJoinOp(jo2, lineitemScan2)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.L_ORDERKEY).$amp$amp(infix_$bang$eq(x.selectDynamic[Int](unit("L_SUPPKEY")), y.L_SUPPKEY)))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)));
        val jo4: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinAnti[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord, Int]] = __newHashJoinAnti(jo3, lineitemScan3)(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => infix_$eq$eq(x.selectDynamic[Int](unit("L_ORDERKEY")), y.L_ORDERKEY).$amp$amp(infix_$bang$eq(x.selectDynamic[Int](unit("L_SUPPKEY")), y.L_SUPPKEY)))))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]) => x.L_ORDERKEY)));
        val jo5: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord], Int]] = __newHashJoinOp(ordersScan, jo4)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord], y: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => infix_$eq$eq(x.O_ORDERKEY, y.selectDynamic[Int](unit("L_ORDERKEY"))))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_ORDERKEY)))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]) => x.selectDynamic[Int](unit("L_ORDERKEY")))));
        val aggOp: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]], ch.epfl.data.sc.pardis.shallow.OptimalString]] = __newAggOp(jo5, unit(1))(__lambda(((x: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]]) => x.selectDynamic[ch.epfl.data.sc.pardis.shallow.OptimalString](unit("S_NAME")))))(__lambda(((t: this.Rep[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.sc.pardis.shallow.DynamicCompositeRecord[ch.epfl.data.dblab.experimentation.tpch.NATIONRecord, ch.epfl.data.dblab.experimentation.tpch.SUPPLIERRecord], ch.epfl.data.dblab.experimentation.tpch.LINEITEMRecord]]], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newSortOp(aggOp)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => {
          val a1: this.Rep[Double] = x.aggs.apply(unit(0));
          val a2: this.Rep[Double] = y.aggs.apply(unit(0));
          __ifThenElse(a1.$less(a2), unit(1), __ifThenElse(a1.$greater(a2), unit(-1), x.key.diff(y.key)))
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => printf(unit("%s|%.0f\n"), kv.key.string, kv.aggs.apply(unit(0))))), unit(100));
        po.run();
        unit(())
      }))))
    }
  }
  override def queriesQ22Object(numRuns: Rep[Int]): Rep[Unit] = {
    {
      val customerTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = TPCHLoader.loadCustomer();
      val ordersTable: this.Rep[Array[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = TPCHLoader.loadOrders();
      intWrapper(unit(0)).until(numRuns).foreach[Unit](__lambda(((i: this.Rep[Int]) => GenericEngine.runQuery[Unit]({
        val v23: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("23"));
        val v29: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("29"));
        val v22: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("22"));
        val v20: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("20"));
        val v24: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("24"));
        val v26: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("26"));
        val v25: this.Rep[ch.epfl.data.sc.pardis.shallow.OptimalString] = GenericEngine.parseString(unit("25"));
        val customerScan1: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newSelectOp(__newScanOp(customerTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_ACCTBAL.$greater(unit(0.0)).$amp$amp(x.C_PHONE.startsWith(v23).$bar$bar(x.C_PHONE.startsWith(v29).$bar$bar(x.C_PHONE.startsWith(v22).$bar$bar(x.C_PHONE.startsWith(v20).$bar$bar(x.C_PHONE.startsWith(v24).$bar$bar(x.C_PHONE.startsWith(v26).$bar$bar(x.C_PHONE.startsWith(v25)))))))))));
        val aggOp1: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, String]] = __newAggOp(customerScan1, unit(3))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => unit("AVG_C_ACCTBAL"))))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], currAgg: this.Rep[Double]) => t.C_ACCTBAL.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val mapOp: this.Rep[ch.epfl.data.dblab.queryengine.push.MapOp[ch.epfl.data.dblab.queryengine.AGGRecord[String]]] = __newMapOp(aggOp1)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[String]]) => {
          kv.key;
          kv.aggs.update(unit(2), kv.aggs.apply(unit(0)).$div(kv.aggs.apply(unit(1))))
        })));
        mapOp.open();
        val nestedAVG: this.Rep[Double] = __newSubquerySingleResult(mapOp).getResult.aggs.apply(unit(2));
        val customerScan2: this.Rep[ch.epfl.data.dblab.queryengine.push.SelectOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]] = __newSelectOp(__newScanOp(customerTable))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_PHONE.startsWith(v23).$bar$bar(x.C_PHONE.startsWith(v29).$bar$bar(x.C_PHONE.startsWith(v22).$bar$bar(x.C_PHONE.startsWith(v20).$bar$bar(x.C_PHONE.startsWith(v24).$bar$bar(x.C_PHONE.startsWith(v26).$bar$bar(x.C_PHONE.startsWith(v25))))))).$amp$amp(x.C_ACCTBAL.$greater(nestedAVG)))));
        val ordersScan: this.Rep[ch.epfl.data.dblab.queryengine.push.ScanOp[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]] = __newScanOp(ordersTable);
        val jo: this.Rep[ch.epfl.data.dblab.queryengine.push.HashJoinAnti[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord, Int]] = __newHashJoinAnti(customerScan2, ordersScan)(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], y: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => infix_$eq$eq(x.C_CUSTKEY, y.O_CUSTKEY))))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_CUSTKEY)))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.ORDERSRecord]) => x.O_CUSTKEY)));
        val aggOp2: this.Rep[ch.epfl.data.dblab.queryengine.push.AggOp[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord, ch.epfl.data.sc.pardis.shallow.OptimalString]] = __newAggOp(jo, unit(2))(__lambda(((x: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord]) => x.C_PHONE.slice(unit(0), unit(2)))))(__lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], currAgg: this.Rep[Double]) => t.C_ACCTBAL.$plus(currAgg))), __lambda(((t: this.Rep[ch.epfl.data.dblab.experimentation.tpch.CUSTOMERRecord], currAgg: this.Rep[Double]) => currAgg.$plus(unit(1)))));
        val sortOp: this.Rep[ch.epfl.data.dblab.queryengine.push.SortOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newSortOp(aggOp2)(__lambda(((x: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]], y: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => {
          var res: this.Var[Int] = __newVarNamed(x.key.apply(unit(0)).$minus(y.key.apply(unit(0))), unit("res"));
          __ifThenElse(infix_$eq$eq(__readVar(res), unit(0)), __assign(res, x.key.apply(unit(1)).$minus(y.key.apply(unit(1)))), unit(()));
          __readVar(res)
        })));
        val po: this.Rep[ch.epfl.data.dblab.queryengine.push.PrintOp[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]] = __newPrintOp(sortOp)(__lambda(((kv: this.Rep[ch.epfl.data.dblab.queryengine.AGGRecord[ch.epfl.data.sc.pardis.shallow.OptimalString]]) => printf(unit("%s|%.0f|%.2f\n"), kv.key.string, kv.aggs.apply(unit(1)), kv.aggs.apply(unit(0))))), unit(-1));
        po.run();
        unit(())
      }))))
    }
  }
}

trait QueriesPartialEvaluation extends QueriesComponent with BasePartialEvaluation { this: ch.epfl.data.dblab.deep.dsls.QueryEngineExp =>
  // Immutable field inlining 

  // Mutable field inlining 
  // Pure function partial evaluation
}

trait QueryComponent extends QueriesComponent { self: ch.epfl.data.dblab.deep.dsls.QueryEngineExp => }