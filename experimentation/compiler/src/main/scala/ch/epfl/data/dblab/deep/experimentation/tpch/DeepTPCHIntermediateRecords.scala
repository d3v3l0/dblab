/* Generated by Purgatory 2014-2017 */

package ch.epfl.data.dblab.deep.experimentation.tpch

import ch.epfl.data.sc.pardis
import pardis.ir._
import pardis.types.PardisTypeImplicits._
import pardis.effects._
import pardis.deep._
import pardis.deep.scalalib._
import pardis.deep.scalalib.collection._
import pardis.deep.scalalib.io._

import ch.epfl.data.sc.pardis.quasi.anf.{ BaseExt, BaseExtIR }
import ch.epfl.data.sc.pardis.quasi.TypeParameters.MaybeParamTag

trait Q1GRPRecordOps extends Base {
  // Type representation
  val Q1GRPRecordType = Q1GRPRecordIRs.Q1GRPRecordType
  implicit val typeQ1GRPRecord: TypeRep[Q1GRPRecord] = Q1GRPRecordType
  implicit class Q1GRPRecordRep(self: Rep[Q1GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q1GRPRecordGetField(self, key)
    def L_LINESTATUS: Rep[Char] = q1GRPRecord_Field_L_LINESTATUS(self)
    def L_RETURNFLAG: Rep[Char] = q1GRPRecord_Field_L_RETURNFLAG(self)
  }
  object Q1GRPRecord {
    def apply(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = q1GRPRecordApplyObject(L_RETURNFLAG, L_LINESTATUS)
  }
  // constructors
  def __newQ1GRPRecord(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = q1GRPRecordNew(L_RETURNFLAG, L_LINESTATUS)
  // IR defs
  val Q1GRPRecordNew = Q1GRPRecordIRs.Q1GRPRecordNew
  type Q1GRPRecordNew = Q1GRPRecordIRs.Q1GRPRecordNew
  val Q1GRPRecordGetField = Q1GRPRecordIRs.Q1GRPRecordGetField
  type Q1GRPRecordGetField = Q1GRPRecordIRs.Q1GRPRecordGetField
  val Q1GRPRecord_Field_L_LINESTATUS = Q1GRPRecordIRs.Q1GRPRecord_Field_L_LINESTATUS
  type Q1GRPRecord_Field_L_LINESTATUS = Q1GRPRecordIRs.Q1GRPRecord_Field_L_LINESTATUS
  val Q1GRPRecord_Field_L_RETURNFLAG = Q1GRPRecordIRs.Q1GRPRecord_Field_L_RETURNFLAG
  type Q1GRPRecord_Field_L_RETURNFLAG = Q1GRPRecordIRs.Q1GRPRecord_Field_L_RETURNFLAG
  // method definitions
  def q1GRPRecordNew(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = Q1GRPRecordNew(L_RETURNFLAG, L_LINESTATUS)
  def q1GRPRecordGetField(self: Rep[Q1GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q1GRPRecordGetField(self, key)
  def q1GRPRecord_Field_L_LINESTATUS(self: Rep[Q1GRPRecord]): Rep[Char] = Q1GRPRecord_Field_L_LINESTATUS(self)
  def q1GRPRecord_Field_L_RETURNFLAG(self: Rep[Q1GRPRecord]): Rep[Char] = Q1GRPRecord_Field_L_RETURNFLAG(self)
  def q1GRPRecordApplyObject(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = {
    __newQ1GRPRecord(L_RETURNFLAG, L_LINESTATUS)
  }
  type Q1GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord
}
object Q1GRPRecordIRs extends Base {
  // Type representation
  case object Q1GRPRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q1GRPRecord](scala.reflect.runtime.universe.typeOf[Q1GRPRecord]) {
    override def isRecord = true
  }
  implicit val typeQ1GRPRecord: TypeRep[Q1GRPRecord] = Q1GRPRecordType
  // case classes
  case class Q1GRPRecordNew(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]) extends ConstructorDef[Q1GRPRecord](List(), "Q1GRPRecord", List(List(L_RETURNFLAG, L_LINESTATUS))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q1GRPRecordGetField(self: Rep[Q1GRPRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q1GRPRecord_Field_L_LINESTATUS(self: Rep[Q1GRPRecord]) extends FieldDef[Char](self, "L_LINESTATUS") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Char = {
      val self = children(0).asInstanceOf[Q1GRPRecord]
      self.L_LINESTATUS
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q1GRPRecord_Field_L_RETURNFLAG(self: Rep[Q1GRPRecord]) extends FieldDef[Char](self, "L_RETURNFLAG") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Char = {
      val self = children(0).asInstanceOf[Q1GRPRecord]
      self.L_RETURNFLAG
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q1GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord
}
trait Q1GRPRecordImplicits extends Q1GRPRecordOps {
  // Add implicit conversions here!
}
trait Q1GRPRecordComponent extends Q1GRPRecordOps with Q1GRPRecordImplicits {}

trait Q1GRPRecordPartialEvaluation extends Q1GRPRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def q1GRPRecord_Field_L_LINESTATUS(self: Rep[Q1GRPRecord]): Rep[Char] = self match {
    case Def(node: Q1GRPRecordNew) => node.L_LINESTATUS
    case _                         => super.q1GRPRecord_Field_L_LINESTATUS(self)
  }
  override def q1GRPRecord_Field_L_RETURNFLAG(self: Rep[Q1GRPRecord]): Rep[Char] = self match {
    case Def(node: Q1GRPRecordNew) => node.L_RETURNFLAG
    case _                         => super.q1GRPRecord_Field_L_RETURNFLAG(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q1GRPRecordQuasiNodes extends BaseExtIR {
  import Q1GRPRecordIRs._
  // case classes
  case class Q1GRPRecordNewExt(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]) extends FunctionDef[Q1GRPRecordNew, Q1GRPRecord] {
    override def nodeUnapply(t: Q1GRPRecordNew): Option[Product] = (Q1GRPRecordNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q1GRPRecordGetFieldExt(self: Rep[Q1GRPRecord], key: Rep[String]) extends FunctionDef[Q1GRPRecordGetField, Option[Any]] {
    override def nodeUnapply(t: Q1GRPRecordGetField): Option[Product] = (Q1GRPRecordGetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q1GRPRecord_Field_L_LINESTATUSExt(self: Rep[Q1GRPRecord]) extends FunctionDef[Q1GRPRecord_Field_L_LINESTATUS, Char] {
    override def nodeUnapply(t: Q1GRPRecord_Field_L_LINESTATUS): Option[Product] = (Q1GRPRecord_Field_L_LINESTATUS.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q1GRPRecord_Field_L_RETURNFLAGExt(self: Rep[Q1GRPRecord]) extends FunctionDef[Q1GRPRecord_Field_L_RETURNFLAG, Char] {
    override def nodeUnapply(t: Q1GRPRecord_Field_L_RETURNFLAG): Option[Product] = (Q1GRPRecord_Field_L_RETURNFLAG.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q1GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord
}

trait Q1GRPRecordExtOps extends BaseExt {

  import Q1GRPRecordQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  implicit class Q1GRPRecordRep(self: Rep[Q1GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q1GRPRecordGetField(self, key)
    def L_LINESTATUS: Rep[Char] = q1GRPRecord_Field_L_LINESTATUS(self)
    def L_RETURNFLAG: Rep[Char] = q1GRPRecord_Field_L_RETURNFLAG(self)
  }
  object Q1GRPRecord {
    def apply(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = q1GRPRecordApplyObject(L_RETURNFLAG, L_LINESTATUS)
  }
  // constructors
  def __newQ1GRPRecord(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = q1GRPRecordNew(L_RETURNFLAG, L_LINESTATUS)

  // method definitions
  def q1GRPRecordApplyObject(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = { __newQ1GRPRecord(L_RETURNFLAG, L_LINESTATUS) }
  def q1GRPRecordNew(L_RETURNFLAG: Rep[Char], L_LINESTATUS: Rep[Char]): Rep[Q1GRPRecord] = Q1GRPRecordNewExt(L_RETURNFLAG, L_LINESTATUS)
  def q1GRPRecordGetField(self: Rep[Q1GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q1GRPRecordGetFieldExt(self, key)
  def q1GRPRecord_Field_L_LINESTATUS(self: Rep[Q1GRPRecord]): Rep[Char] = Q1GRPRecord_Field_L_LINESTATUSExt(self)
  def q1GRPRecord_Field_L_RETURNFLAG(self: Rep[Q1GRPRecord]): Rep[Char] = Q1GRPRecord_Field_L_RETURNFLAGExt(self)
  type Q1GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q1GRPRecord
}

trait Q3GRPRecordOps extends Base {
  // Type representation
  val Q3GRPRecordType = Q3GRPRecordIRs.Q3GRPRecordType
  implicit val typeQ3GRPRecord: TypeRep[Q3GRPRecord] = Q3GRPRecordType
  implicit class Q3GRPRecordRep(self: Rep[Q3GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q3GRPRecordGetField(self, key)
    def O_SHIPPRIORITY: Rep[Int] = q3GRPRecord_Field_O_SHIPPRIORITY(self)
    def O_ORDERDATE: Rep[Int] = q3GRPRecord_Field_O_ORDERDATE(self)
    def L_ORDERKEY: Rep[Int] = q3GRPRecord_Field_L_ORDERKEY(self)
  }
  object Q3GRPRecord {
    def apply(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = q3GRPRecordApplyObject(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY)
  }
  // constructors
  def __newQ3GRPRecord(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = q3GRPRecordNew(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY)
  // IR defs
  val Q3GRPRecordNew = Q3GRPRecordIRs.Q3GRPRecordNew
  type Q3GRPRecordNew = Q3GRPRecordIRs.Q3GRPRecordNew
  val Q3GRPRecordGetField = Q3GRPRecordIRs.Q3GRPRecordGetField
  type Q3GRPRecordGetField = Q3GRPRecordIRs.Q3GRPRecordGetField
  val Q3GRPRecord_Field_O_SHIPPRIORITY = Q3GRPRecordIRs.Q3GRPRecord_Field_O_SHIPPRIORITY
  type Q3GRPRecord_Field_O_SHIPPRIORITY = Q3GRPRecordIRs.Q3GRPRecord_Field_O_SHIPPRIORITY
  val Q3GRPRecord_Field_O_ORDERDATE = Q3GRPRecordIRs.Q3GRPRecord_Field_O_ORDERDATE
  type Q3GRPRecord_Field_O_ORDERDATE = Q3GRPRecordIRs.Q3GRPRecord_Field_O_ORDERDATE
  val Q3GRPRecord_Field_L_ORDERKEY = Q3GRPRecordIRs.Q3GRPRecord_Field_L_ORDERKEY
  type Q3GRPRecord_Field_L_ORDERKEY = Q3GRPRecordIRs.Q3GRPRecord_Field_L_ORDERKEY
  // method definitions
  def q3GRPRecordNew(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = Q3GRPRecordNew(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY)
  def q3GRPRecordGetField(self: Rep[Q3GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q3GRPRecordGetField(self, key)
  def q3GRPRecord_Field_O_SHIPPRIORITY(self: Rep[Q3GRPRecord]): Rep[Int] = Q3GRPRecord_Field_O_SHIPPRIORITY(self)
  def q3GRPRecord_Field_O_ORDERDATE(self: Rep[Q3GRPRecord]): Rep[Int] = Q3GRPRecord_Field_O_ORDERDATE(self)
  def q3GRPRecord_Field_L_ORDERKEY(self: Rep[Q3GRPRecord]): Rep[Int] = Q3GRPRecord_Field_L_ORDERKEY(self)
  def q3GRPRecordApplyObject(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = {
    __newQ3GRPRecord(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY)
  }
  type Q3GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord
}
object Q3GRPRecordIRs extends Base {
  // Type representation
  case object Q3GRPRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q3GRPRecord](scala.reflect.runtime.universe.typeOf[Q3GRPRecord]) {
    override def isRecord = true
  }
  implicit val typeQ3GRPRecord: TypeRep[Q3GRPRecord] = Q3GRPRecordType
  // case classes
  case class Q3GRPRecordNew(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]) extends ConstructorDef[Q3GRPRecord](List(), "Q3GRPRecord", List(List(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q3GRPRecordGetField(self: Rep[Q3GRPRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q3GRPRecord_Field_O_SHIPPRIORITY(self: Rep[Q3GRPRecord]) extends FieldDef[Int](self, "O_SHIPPRIORITY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q3GRPRecord]
      self.O_SHIPPRIORITY
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q3GRPRecord_Field_O_ORDERDATE(self: Rep[Q3GRPRecord]) extends FieldDef[Int](self, "O_ORDERDATE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q3GRPRecord]
      self.O_ORDERDATE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q3GRPRecord_Field_L_ORDERKEY(self: Rep[Q3GRPRecord]) extends FieldDef[Int](self, "L_ORDERKEY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q3GRPRecord]
      self.L_ORDERKEY
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q3GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord
}
trait Q3GRPRecordImplicits extends Q3GRPRecordOps {
  // Add implicit conversions here!
}
trait Q3GRPRecordComponent extends Q3GRPRecordOps with Q3GRPRecordImplicits {}

trait Q3GRPRecordPartialEvaluation extends Q3GRPRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def q3GRPRecord_Field_O_SHIPPRIORITY(self: Rep[Q3GRPRecord]): Rep[Int] = self match {
    case Def(node: Q3GRPRecordNew) => node.O_SHIPPRIORITY
    case _                         => super.q3GRPRecord_Field_O_SHIPPRIORITY(self)
  }
  override def q3GRPRecord_Field_O_ORDERDATE(self: Rep[Q3GRPRecord]): Rep[Int] = self match {
    case Def(node: Q3GRPRecordNew) => node.O_ORDERDATE
    case _                         => super.q3GRPRecord_Field_O_ORDERDATE(self)
  }
  override def q3GRPRecord_Field_L_ORDERKEY(self: Rep[Q3GRPRecord]): Rep[Int] = self match {
    case Def(node: Q3GRPRecordNew) => node.L_ORDERKEY
    case _                         => super.q3GRPRecord_Field_L_ORDERKEY(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q3GRPRecordQuasiNodes extends BaseExtIR {
  import Q3GRPRecordIRs._
  // case classes
  case class Q3GRPRecordNewExt(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]) extends FunctionDef[Q3GRPRecordNew, Q3GRPRecord] {
    override def nodeUnapply(t: Q3GRPRecordNew): Option[Product] = (Q3GRPRecordNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q3GRPRecordGetFieldExt(self: Rep[Q3GRPRecord], key: Rep[String]) extends FunctionDef[Q3GRPRecordGetField, Option[Any]] {
    override def nodeUnapply(t: Q3GRPRecordGetField): Option[Product] = (Q3GRPRecordGetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q3GRPRecord_Field_O_SHIPPRIORITYExt(self: Rep[Q3GRPRecord]) extends FunctionDef[Q3GRPRecord_Field_O_SHIPPRIORITY, Int] {
    override def nodeUnapply(t: Q3GRPRecord_Field_O_SHIPPRIORITY): Option[Product] = (Q3GRPRecord_Field_O_SHIPPRIORITY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q3GRPRecord_Field_O_ORDERDATEExt(self: Rep[Q3GRPRecord]) extends FunctionDef[Q3GRPRecord_Field_O_ORDERDATE, Int] {
    override def nodeUnapply(t: Q3GRPRecord_Field_O_ORDERDATE): Option[Product] = (Q3GRPRecord_Field_O_ORDERDATE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q3GRPRecord_Field_L_ORDERKEYExt(self: Rep[Q3GRPRecord]) extends FunctionDef[Q3GRPRecord_Field_L_ORDERKEY, Int] {
    override def nodeUnapply(t: Q3GRPRecord_Field_L_ORDERKEY): Option[Product] = (Q3GRPRecord_Field_L_ORDERKEY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q3GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord
}

trait Q3GRPRecordExtOps extends BaseExt {

  import Q3GRPRecordQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  implicit class Q3GRPRecordRep(self: Rep[Q3GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q3GRPRecordGetField(self, key)
    def O_SHIPPRIORITY: Rep[Int] = q3GRPRecord_Field_O_SHIPPRIORITY(self)
    def O_ORDERDATE: Rep[Int] = q3GRPRecord_Field_O_ORDERDATE(self)
    def L_ORDERKEY: Rep[Int] = q3GRPRecord_Field_L_ORDERKEY(self)
  }
  object Q3GRPRecord {
    def apply(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = q3GRPRecordApplyObject(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY)
  }
  // constructors
  def __newQ3GRPRecord(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = q3GRPRecordNew(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY)

  // method definitions
  def q3GRPRecordApplyObject(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = { __newQ3GRPRecord(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY) }
  def q3GRPRecordNew(L_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_SHIPPRIORITY: Rep[Int]): Rep[Q3GRPRecord] = Q3GRPRecordNewExt(L_ORDERKEY, O_ORDERDATE, O_SHIPPRIORITY)
  def q3GRPRecordGetField(self: Rep[Q3GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q3GRPRecordGetFieldExt(self, key)
  def q3GRPRecord_Field_O_SHIPPRIORITY(self: Rep[Q3GRPRecord]): Rep[Int] = Q3GRPRecord_Field_O_SHIPPRIORITYExt(self)
  def q3GRPRecord_Field_O_ORDERDATE(self: Rep[Q3GRPRecord]): Rep[Int] = Q3GRPRecord_Field_O_ORDERDATEExt(self)
  def q3GRPRecord_Field_L_ORDERKEY(self: Rep[Q3GRPRecord]): Rep[Int] = Q3GRPRecord_Field_L_ORDERKEYExt(self)
  type Q3GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q3GRPRecord
}

trait Q7GRPRecordOps extends Base with OptimalStringOps {
  // Type representation
  val Q7GRPRecordType = Q7GRPRecordIRs.Q7GRPRecordType
  implicit val typeQ7GRPRecord: TypeRep[Q7GRPRecord] = Q7GRPRecordType
  implicit class Q7GRPRecordRep(self: Rep[Q7GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q7GRPRecordGetField(self, key)
    def L_YEAR: Rep[Int] = q7GRPRecord_Field_L_YEAR(self)
    def CUST_NATION: Rep[OptimalString] = q7GRPRecord_Field_CUST_NATION(self)
    def SUPP_NATION: Rep[OptimalString] = q7GRPRecord_Field_SUPP_NATION(self)
  }
  object Q7GRPRecord {
    def apply(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = q7GRPRecordApplyObject(SUPP_NATION, CUST_NATION, L_YEAR)
  }
  // constructors
  def __newQ7GRPRecord(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = q7GRPRecordNew(SUPP_NATION, CUST_NATION, L_YEAR)
  // IR defs
  val Q7GRPRecordNew = Q7GRPRecordIRs.Q7GRPRecordNew
  type Q7GRPRecordNew = Q7GRPRecordIRs.Q7GRPRecordNew
  val Q7GRPRecordGetField = Q7GRPRecordIRs.Q7GRPRecordGetField
  type Q7GRPRecordGetField = Q7GRPRecordIRs.Q7GRPRecordGetField
  val Q7GRPRecord_Field_L_YEAR = Q7GRPRecordIRs.Q7GRPRecord_Field_L_YEAR
  type Q7GRPRecord_Field_L_YEAR = Q7GRPRecordIRs.Q7GRPRecord_Field_L_YEAR
  val Q7GRPRecord_Field_CUST_NATION = Q7GRPRecordIRs.Q7GRPRecord_Field_CUST_NATION
  type Q7GRPRecord_Field_CUST_NATION = Q7GRPRecordIRs.Q7GRPRecord_Field_CUST_NATION
  val Q7GRPRecord_Field_SUPP_NATION = Q7GRPRecordIRs.Q7GRPRecord_Field_SUPP_NATION
  type Q7GRPRecord_Field_SUPP_NATION = Q7GRPRecordIRs.Q7GRPRecord_Field_SUPP_NATION
  // method definitions
  def q7GRPRecordNew(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = Q7GRPRecordNew(SUPP_NATION, CUST_NATION, L_YEAR)
  def q7GRPRecordGetField(self: Rep[Q7GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q7GRPRecordGetField(self, key)
  def q7GRPRecord_Field_L_YEAR(self: Rep[Q7GRPRecord]): Rep[Int] = Q7GRPRecord_Field_L_YEAR(self)
  def q7GRPRecord_Field_CUST_NATION(self: Rep[Q7GRPRecord]): Rep[OptimalString] = Q7GRPRecord_Field_CUST_NATION(self)
  def q7GRPRecord_Field_SUPP_NATION(self: Rep[Q7GRPRecord]): Rep[OptimalString] = Q7GRPRecord_Field_SUPP_NATION(self)
  def q7GRPRecordApplyObject(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = {
    __newQ7GRPRecord(SUPP_NATION, CUST_NATION, L_YEAR)
  }
  type Q7GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord
}
object Q7GRPRecordIRs extends Base {
  import OptimalStringIRs._
  // Type representation
  case object Q7GRPRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q7GRPRecord](scala.reflect.runtime.universe.typeOf[Q7GRPRecord]) {
    override def isRecord = true
  }
  implicit val typeQ7GRPRecord: TypeRep[Q7GRPRecord] = Q7GRPRecordType
  // case classes
  case class Q7GRPRecordNew(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]) extends ConstructorDef[Q7GRPRecord](List(), "Q7GRPRecord", List(List(SUPP_NATION, CUST_NATION, L_YEAR))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q7GRPRecordGetField(self: Rep[Q7GRPRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q7GRPRecord_Field_L_YEAR(self: Rep[Q7GRPRecord]) extends FieldDef[Int](self, "L_YEAR") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q7GRPRecord]
      self.L_YEAR
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q7GRPRecord_Field_CUST_NATION(self: Rep[Q7GRPRecord]) extends FieldDef[OptimalString](self, "CUST_NATION") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q7GRPRecord]
      self.CUST_NATION
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q7GRPRecord_Field_SUPP_NATION(self: Rep[Q7GRPRecord]) extends FieldDef[OptimalString](self, "SUPP_NATION") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q7GRPRecord]
      self.SUPP_NATION
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q7GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord
}
trait Q7GRPRecordImplicits extends Q7GRPRecordOps {
  // Add implicit conversions here!
}
trait Q7GRPRecordComponent extends Q7GRPRecordOps with Q7GRPRecordImplicits {}

trait Q7GRPRecordPartialEvaluation extends Q7GRPRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def q7GRPRecord_Field_L_YEAR(self: Rep[Q7GRPRecord]): Rep[Int] = self match {
    case Def(node: Q7GRPRecordNew) => node.L_YEAR
    case _                         => super.q7GRPRecord_Field_L_YEAR(self)
  }
  override def q7GRPRecord_Field_CUST_NATION(self: Rep[Q7GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q7GRPRecordNew) => node.CUST_NATION
    case _                         => super.q7GRPRecord_Field_CUST_NATION(self)
  }
  override def q7GRPRecord_Field_SUPP_NATION(self: Rep[Q7GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q7GRPRecordNew) => node.SUPP_NATION
    case _                         => super.q7GRPRecord_Field_SUPP_NATION(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q7GRPRecordQuasiNodes extends BaseExtIR {
  import Q7GRPRecordIRs._
  import OptimalStringQuasiNodes._
  // case classes
  case class Q7GRPRecordNewExt(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]) extends FunctionDef[Q7GRPRecordNew, Q7GRPRecord] {
    override def nodeUnapply(t: Q7GRPRecordNew): Option[Product] = (Q7GRPRecordNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q7GRPRecordGetFieldExt(self: Rep[Q7GRPRecord], key: Rep[String]) extends FunctionDef[Q7GRPRecordGetField, Option[Any]] {
    override def nodeUnapply(t: Q7GRPRecordGetField): Option[Product] = (Q7GRPRecordGetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q7GRPRecord_Field_L_YEARExt(self: Rep[Q7GRPRecord]) extends FunctionDef[Q7GRPRecord_Field_L_YEAR, Int] {
    override def nodeUnapply(t: Q7GRPRecord_Field_L_YEAR): Option[Product] = (Q7GRPRecord_Field_L_YEAR.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q7GRPRecord_Field_CUST_NATIONExt(self: Rep[Q7GRPRecord]) extends FunctionDef[Q7GRPRecord_Field_CUST_NATION, OptimalString] {
    override def nodeUnapply(t: Q7GRPRecord_Field_CUST_NATION): Option[Product] = (Q7GRPRecord_Field_CUST_NATION.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q7GRPRecord_Field_SUPP_NATIONExt(self: Rep[Q7GRPRecord]) extends FunctionDef[Q7GRPRecord_Field_SUPP_NATION, OptimalString] {
    override def nodeUnapply(t: Q7GRPRecord_Field_SUPP_NATION): Option[Product] = (Q7GRPRecord_Field_SUPP_NATION.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q7GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord
}

trait Q7GRPRecordExtOps extends BaseExt with OptimalStringExtOps {

  import Q7GRPRecordQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  import OptimalStringQuasiNodes._
  implicit class Q7GRPRecordRep(self: Rep[Q7GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q7GRPRecordGetField(self, key)
    def L_YEAR: Rep[Int] = q7GRPRecord_Field_L_YEAR(self)
    def CUST_NATION: Rep[OptimalString] = q7GRPRecord_Field_CUST_NATION(self)
    def SUPP_NATION: Rep[OptimalString] = q7GRPRecord_Field_SUPP_NATION(self)
  }
  object Q7GRPRecord {
    def apply(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = q7GRPRecordApplyObject(SUPP_NATION, CUST_NATION, L_YEAR)
  }
  // constructors
  def __newQ7GRPRecord(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = q7GRPRecordNew(SUPP_NATION, CUST_NATION, L_YEAR)

  // method definitions
  def q7GRPRecordApplyObject(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = { __newQ7GRPRecord(SUPP_NATION, CUST_NATION, L_YEAR) }
  def q7GRPRecordNew(SUPP_NATION: Rep[OptimalString], CUST_NATION: Rep[OptimalString], L_YEAR: Rep[Int]): Rep[Q7GRPRecord] = Q7GRPRecordNewExt(SUPP_NATION, CUST_NATION, L_YEAR)
  def q7GRPRecordGetField(self: Rep[Q7GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q7GRPRecordGetFieldExt(self, key)
  def q7GRPRecord_Field_L_YEAR(self: Rep[Q7GRPRecord]): Rep[Int] = Q7GRPRecord_Field_L_YEARExt(self)
  def q7GRPRecord_Field_CUST_NATION(self: Rep[Q7GRPRecord]): Rep[OptimalString] = Q7GRPRecord_Field_CUST_NATIONExt(self)
  def q7GRPRecord_Field_SUPP_NATION(self: Rep[Q7GRPRecord]): Rep[OptimalString] = Q7GRPRecord_Field_SUPP_NATIONExt(self)
  type Q7GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q7GRPRecord
}

trait Q9GRPRecordOps extends Base with OptimalStringOps {
  // Type representation
  val Q9GRPRecordType = Q9GRPRecordIRs.Q9GRPRecordType
  implicit val typeQ9GRPRecord: TypeRep[Q9GRPRecord] = Q9GRPRecordType
  implicit class Q9GRPRecordRep(self: Rep[Q9GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q9GRPRecordGetField(self, key)
    def O_YEAR: Rep[Int] = q9GRPRecord_Field_O_YEAR(self)
    def NATION: Rep[OptimalString] = q9GRPRecord_Field_NATION(self)
  }
  object Q9GRPRecord {
    def apply(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = q9GRPRecordApplyObject(NATION, O_YEAR)
  }
  // constructors
  def __newQ9GRPRecord(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = q9GRPRecordNew(NATION, O_YEAR)
  // IR defs
  val Q9GRPRecordNew = Q9GRPRecordIRs.Q9GRPRecordNew
  type Q9GRPRecordNew = Q9GRPRecordIRs.Q9GRPRecordNew
  val Q9GRPRecordGetField = Q9GRPRecordIRs.Q9GRPRecordGetField
  type Q9GRPRecordGetField = Q9GRPRecordIRs.Q9GRPRecordGetField
  val Q9GRPRecord_Field_O_YEAR = Q9GRPRecordIRs.Q9GRPRecord_Field_O_YEAR
  type Q9GRPRecord_Field_O_YEAR = Q9GRPRecordIRs.Q9GRPRecord_Field_O_YEAR
  val Q9GRPRecord_Field_NATION = Q9GRPRecordIRs.Q9GRPRecord_Field_NATION
  type Q9GRPRecord_Field_NATION = Q9GRPRecordIRs.Q9GRPRecord_Field_NATION
  // method definitions
  def q9GRPRecordNew(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = Q9GRPRecordNew(NATION, O_YEAR)
  def q9GRPRecordGetField(self: Rep[Q9GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q9GRPRecordGetField(self, key)
  def q9GRPRecord_Field_O_YEAR(self: Rep[Q9GRPRecord]): Rep[Int] = Q9GRPRecord_Field_O_YEAR(self)
  def q9GRPRecord_Field_NATION(self: Rep[Q9GRPRecord]): Rep[OptimalString] = Q9GRPRecord_Field_NATION(self)
  def q9GRPRecordApplyObject(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = {
    __newQ9GRPRecord(NATION, O_YEAR)
  }
  type Q9GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord
}
object Q9GRPRecordIRs extends Base {
  import OptimalStringIRs._
  // Type representation
  case object Q9GRPRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q9GRPRecord](scala.reflect.runtime.universe.typeOf[Q9GRPRecord]) {
    override def isRecord = true
  }
  implicit val typeQ9GRPRecord: TypeRep[Q9GRPRecord] = Q9GRPRecordType
  // case classes
  case class Q9GRPRecordNew(NATION: Rep[OptimalString], O_YEAR: Rep[Int]) extends ConstructorDef[Q9GRPRecord](List(), "Q9GRPRecord", List(List(NATION, O_YEAR))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q9GRPRecordGetField(self: Rep[Q9GRPRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q9GRPRecord_Field_O_YEAR(self: Rep[Q9GRPRecord]) extends FieldDef[Int](self, "O_YEAR") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q9GRPRecord]
      self.O_YEAR
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q9GRPRecord_Field_NATION(self: Rep[Q9GRPRecord]) extends FieldDef[OptimalString](self, "NATION") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q9GRPRecord]
      self.NATION
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q9GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord
}
trait Q9GRPRecordImplicits extends Q9GRPRecordOps {
  // Add implicit conversions here!
}
trait Q9GRPRecordComponent extends Q9GRPRecordOps with Q9GRPRecordImplicits {}

trait Q9GRPRecordPartialEvaluation extends Q9GRPRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def q9GRPRecord_Field_O_YEAR(self: Rep[Q9GRPRecord]): Rep[Int] = self match {
    case Def(node: Q9GRPRecordNew) => node.O_YEAR
    case _                         => super.q9GRPRecord_Field_O_YEAR(self)
  }
  override def q9GRPRecord_Field_NATION(self: Rep[Q9GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q9GRPRecordNew) => node.NATION
    case _                         => super.q9GRPRecord_Field_NATION(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q9GRPRecordQuasiNodes extends BaseExtIR {
  import Q9GRPRecordIRs._
  import OptimalStringQuasiNodes._
  // case classes
  case class Q9GRPRecordNewExt(NATION: Rep[OptimalString], O_YEAR: Rep[Int]) extends FunctionDef[Q9GRPRecordNew, Q9GRPRecord] {
    override def nodeUnapply(t: Q9GRPRecordNew): Option[Product] = (Q9GRPRecordNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q9GRPRecordGetFieldExt(self: Rep[Q9GRPRecord], key: Rep[String]) extends FunctionDef[Q9GRPRecordGetField, Option[Any]] {
    override def nodeUnapply(t: Q9GRPRecordGetField): Option[Product] = (Q9GRPRecordGetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q9GRPRecord_Field_O_YEARExt(self: Rep[Q9GRPRecord]) extends FunctionDef[Q9GRPRecord_Field_O_YEAR, Int] {
    override def nodeUnapply(t: Q9GRPRecord_Field_O_YEAR): Option[Product] = (Q9GRPRecord_Field_O_YEAR.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q9GRPRecord_Field_NATIONExt(self: Rep[Q9GRPRecord]) extends FunctionDef[Q9GRPRecord_Field_NATION, OptimalString] {
    override def nodeUnapply(t: Q9GRPRecord_Field_NATION): Option[Product] = (Q9GRPRecord_Field_NATION.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q9GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord
}

trait Q9GRPRecordExtOps extends BaseExt with OptimalStringExtOps {

  import Q9GRPRecordQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  import OptimalStringQuasiNodes._
  implicit class Q9GRPRecordRep(self: Rep[Q9GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q9GRPRecordGetField(self, key)
    def O_YEAR: Rep[Int] = q9GRPRecord_Field_O_YEAR(self)
    def NATION: Rep[OptimalString] = q9GRPRecord_Field_NATION(self)
  }
  object Q9GRPRecord {
    def apply(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = q9GRPRecordApplyObject(NATION, O_YEAR)
  }
  // constructors
  def __newQ9GRPRecord(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = q9GRPRecordNew(NATION, O_YEAR)

  // method definitions
  def q9GRPRecordApplyObject(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = { __newQ9GRPRecord(NATION, O_YEAR) }
  def q9GRPRecordNew(NATION: Rep[OptimalString], O_YEAR: Rep[Int]): Rep[Q9GRPRecord] = Q9GRPRecordNewExt(NATION, O_YEAR)
  def q9GRPRecordGetField(self: Rep[Q9GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q9GRPRecordGetFieldExt(self, key)
  def q9GRPRecord_Field_O_YEAR(self: Rep[Q9GRPRecord]): Rep[Int] = Q9GRPRecord_Field_O_YEARExt(self)
  def q9GRPRecord_Field_NATION(self: Rep[Q9GRPRecord]): Rep[OptimalString] = Q9GRPRecord_Field_NATIONExt(self)
  type Q9GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q9GRPRecord
}

trait Q10GRPRecordOps extends Base with OptimalStringOps {
  // Type representation
  val Q10GRPRecordType = Q10GRPRecordIRs.Q10GRPRecordType
  implicit val typeQ10GRPRecord: TypeRep[Q10GRPRecord] = Q10GRPRecordType
  implicit class Q10GRPRecordRep(self: Rep[Q10GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q10GRPRecordGetField(self, key)
    def C_COMMENT: Rep[OptimalString] = q10GRPRecord_Field_C_COMMENT(self)
    def C_ADDRESS: Rep[OptimalString] = q10GRPRecord_Field_C_ADDRESS(self)
    def N_NAME: Rep[OptimalString] = q10GRPRecord_Field_N_NAME(self)
    def C_PHONE: Rep[OptimalString] = q10GRPRecord_Field_C_PHONE(self)
    def C_ACCTBAL: Rep[Double] = q10GRPRecord_Field_C_ACCTBAL(self)
    def C_NAME: Rep[OptimalString] = q10GRPRecord_Field_C_NAME(self)
    def C_CUSTKEY: Rep[Int] = q10GRPRecord_Field_C_CUSTKEY(self)
  }
  object Q10GRPRecord {
    def apply(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = q10GRPRecordApplyObject(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT)
  }
  // constructors
  def __newQ10GRPRecord(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = q10GRPRecordNew(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT)
  // IR defs
  val Q10GRPRecordNew = Q10GRPRecordIRs.Q10GRPRecordNew
  type Q10GRPRecordNew = Q10GRPRecordIRs.Q10GRPRecordNew
  val Q10GRPRecordGetField = Q10GRPRecordIRs.Q10GRPRecordGetField
  type Q10GRPRecordGetField = Q10GRPRecordIRs.Q10GRPRecordGetField
  val Q10GRPRecord_Field_C_COMMENT = Q10GRPRecordIRs.Q10GRPRecord_Field_C_COMMENT
  type Q10GRPRecord_Field_C_COMMENT = Q10GRPRecordIRs.Q10GRPRecord_Field_C_COMMENT
  val Q10GRPRecord_Field_C_ADDRESS = Q10GRPRecordIRs.Q10GRPRecord_Field_C_ADDRESS
  type Q10GRPRecord_Field_C_ADDRESS = Q10GRPRecordIRs.Q10GRPRecord_Field_C_ADDRESS
  val Q10GRPRecord_Field_N_NAME = Q10GRPRecordIRs.Q10GRPRecord_Field_N_NAME
  type Q10GRPRecord_Field_N_NAME = Q10GRPRecordIRs.Q10GRPRecord_Field_N_NAME
  val Q10GRPRecord_Field_C_PHONE = Q10GRPRecordIRs.Q10GRPRecord_Field_C_PHONE
  type Q10GRPRecord_Field_C_PHONE = Q10GRPRecordIRs.Q10GRPRecord_Field_C_PHONE
  val Q10GRPRecord_Field_C_ACCTBAL = Q10GRPRecordIRs.Q10GRPRecord_Field_C_ACCTBAL
  type Q10GRPRecord_Field_C_ACCTBAL = Q10GRPRecordIRs.Q10GRPRecord_Field_C_ACCTBAL
  val Q10GRPRecord_Field_C_NAME = Q10GRPRecordIRs.Q10GRPRecord_Field_C_NAME
  type Q10GRPRecord_Field_C_NAME = Q10GRPRecordIRs.Q10GRPRecord_Field_C_NAME
  val Q10GRPRecord_Field_C_CUSTKEY = Q10GRPRecordIRs.Q10GRPRecord_Field_C_CUSTKEY
  type Q10GRPRecord_Field_C_CUSTKEY = Q10GRPRecordIRs.Q10GRPRecord_Field_C_CUSTKEY
  // method definitions
  def q10GRPRecordNew(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = Q10GRPRecordNew(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT)
  def q10GRPRecordGetField(self: Rep[Q10GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q10GRPRecordGetField(self, key)
  def q10GRPRecord_Field_C_COMMENT(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_COMMENT(self)
  def q10GRPRecord_Field_C_ADDRESS(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_ADDRESS(self)
  def q10GRPRecord_Field_N_NAME(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_N_NAME(self)
  def q10GRPRecord_Field_C_PHONE(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_PHONE(self)
  def q10GRPRecord_Field_C_ACCTBAL(self: Rep[Q10GRPRecord]): Rep[Double] = Q10GRPRecord_Field_C_ACCTBAL(self)
  def q10GRPRecord_Field_C_NAME(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_NAME(self)
  def q10GRPRecord_Field_C_CUSTKEY(self: Rep[Q10GRPRecord]): Rep[Int] = Q10GRPRecord_Field_C_CUSTKEY(self)
  def q10GRPRecordApplyObject(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = {
    __newQ10GRPRecord(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT)
  }
  type Q10GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord
}
object Q10GRPRecordIRs extends Base {
  import OptimalStringIRs._
  // Type representation
  case object Q10GRPRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q10GRPRecord](scala.reflect.runtime.universe.typeOf[Q10GRPRecord]) {
    override def isRecord = true
  }
  implicit val typeQ10GRPRecord: TypeRep[Q10GRPRecord] = Q10GRPRecordType
  // case classes
  case class Q10GRPRecordNew(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]) extends ConstructorDef[Q10GRPRecord](List(), "Q10GRPRecord", List(List(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q10GRPRecordGetField(self: Rep[Q10GRPRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q10GRPRecord_Field_C_COMMENT(self: Rep[Q10GRPRecord]) extends FieldDef[OptimalString](self, "C_COMMENT") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q10GRPRecord]
      self.C_COMMENT
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q10GRPRecord_Field_C_ADDRESS(self: Rep[Q10GRPRecord]) extends FieldDef[OptimalString](self, "C_ADDRESS") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q10GRPRecord]
      self.C_ADDRESS
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q10GRPRecord_Field_N_NAME(self: Rep[Q10GRPRecord]) extends FieldDef[OptimalString](self, "N_NAME") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q10GRPRecord]
      self.N_NAME
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q10GRPRecord_Field_C_PHONE(self: Rep[Q10GRPRecord]) extends FieldDef[OptimalString](self, "C_PHONE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q10GRPRecord]
      self.C_PHONE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q10GRPRecord_Field_C_ACCTBAL(self: Rep[Q10GRPRecord]) extends FieldDef[Double](self, "C_ACCTBAL") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Double = {
      val self = children(0).asInstanceOf[Q10GRPRecord]
      self.C_ACCTBAL
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q10GRPRecord_Field_C_NAME(self: Rep[Q10GRPRecord]) extends FieldDef[OptimalString](self, "C_NAME") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q10GRPRecord]
      self.C_NAME
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q10GRPRecord_Field_C_CUSTKEY(self: Rep[Q10GRPRecord]) extends FieldDef[Int](self, "C_CUSTKEY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q10GRPRecord]
      self.C_CUSTKEY
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q10GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord
}
trait Q10GRPRecordImplicits extends Q10GRPRecordOps {
  // Add implicit conversions here!
}
trait Q10GRPRecordComponent extends Q10GRPRecordOps with Q10GRPRecordImplicits {}

trait Q10GRPRecordPartialEvaluation extends Q10GRPRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def q10GRPRecord_Field_C_COMMENT(self: Rep[Q10GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q10GRPRecordNew) => node.C_COMMENT
    case _                          => super.q10GRPRecord_Field_C_COMMENT(self)
  }
  override def q10GRPRecord_Field_C_ADDRESS(self: Rep[Q10GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q10GRPRecordNew) => node.C_ADDRESS
    case _                          => super.q10GRPRecord_Field_C_ADDRESS(self)
  }
  override def q10GRPRecord_Field_N_NAME(self: Rep[Q10GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q10GRPRecordNew) => node.N_NAME
    case _                          => super.q10GRPRecord_Field_N_NAME(self)
  }
  override def q10GRPRecord_Field_C_PHONE(self: Rep[Q10GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q10GRPRecordNew) => node.C_PHONE
    case _                          => super.q10GRPRecord_Field_C_PHONE(self)
  }
  override def q10GRPRecord_Field_C_ACCTBAL(self: Rep[Q10GRPRecord]): Rep[Double] = self match {
    case Def(node: Q10GRPRecordNew) => node.C_ACCTBAL
    case _                          => super.q10GRPRecord_Field_C_ACCTBAL(self)
  }
  override def q10GRPRecord_Field_C_NAME(self: Rep[Q10GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q10GRPRecordNew) => node.C_NAME
    case _                          => super.q10GRPRecord_Field_C_NAME(self)
  }
  override def q10GRPRecord_Field_C_CUSTKEY(self: Rep[Q10GRPRecord]): Rep[Int] = self match {
    case Def(node: Q10GRPRecordNew) => node.C_CUSTKEY
    case _                          => super.q10GRPRecord_Field_C_CUSTKEY(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q10GRPRecordQuasiNodes extends BaseExtIR {
  import Q10GRPRecordIRs._
  import OptimalStringQuasiNodes._
  // case classes
  case class Q10GRPRecordNewExt(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]) extends FunctionDef[Q10GRPRecordNew, Q10GRPRecord] {
    override def nodeUnapply(t: Q10GRPRecordNew): Option[Product] = (Q10GRPRecordNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecordGetFieldExt(self: Rep[Q10GRPRecord], key: Rep[String]) extends FunctionDef[Q10GRPRecordGetField, Option[Any]] {
    override def nodeUnapply(t: Q10GRPRecordGetField): Option[Product] = (Q10GRPRecordGetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecord_Field_C_COMMENTExt(self: Rep[Q10GRPRecord]) extends FunctionDef[Q10GRPRecord_Field_C_COMMENT, OptimalString] {
    override def nodeUnapply(t: Q10GRPRecord_Field_C_COMMENT): Option[Product] = (Q10GRPRecord_Field_C_COMMENT.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecord_Field_C_ADDRESSExt(self: Rep[Q10GRPRecord]) extends FunctionDef[Q10GRPRecord_Field_C_ADDRESS, OptimalString] {
    override def nodeUnapply(t: Q10GRPRecord_Field_C_ADDRESS): Option[Product] = (Q10GRPRecord_Field_C_ADDRESS.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecord_Field_N_NAMEExt(self: Rep[Q10GRPRecord]) extends FunctionDef[Q10GRPRecord_Field_N_NAME, OptimalString] {
    override def nodeUnapply(t: Q10GRPRecord_Field_N_NAME): Option[Product] = (Q10GRPRecord_Field_N_NAME.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecord_Field_C_PHONEExt(self: Rep[Q10GRPRecord]) extends FunctionDef[Q10GRPRecord_Field_C_PHONE, OptimalString] {
    override def nodeUnapply(t: Q10GRPRecord_Field_C_PHONE): Option[Product] = (Q10GRPRecord_Field_C_PHONE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecord_Field_C_ACCTBALExt(self: Rep[Q10GRPRecord]) extends FunctionDef[Q10GRPRecord_Field_C_ACCTBAL, Double] {
    override def nodeUnapply(t: Q10GRPRecord_Field_C_ACCTBAL): Option[Product] = (Q10GRPRecord_Field_C_ACCTBAL.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecord_Field_C_NAMEExt(self: Rep[Q10GRPRecord]) extends FunctionDef[Q10GRPRecord_Field_C_NAME, OptimalString] {
    override def nodeUnapply(t: Q10GRPRecord_Field_C_NAME): Option[Product] = (Q10GRPRecord_Field_C_NAME.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q10GRPRecord_Field_C_CUSTKEYExt(self: Rep[Q10GRPRecord]) extends FunctionDef[Q10GRPRecord_Field_C_CUSTKEY, Int] {
    override def nodeUnapply(t: Q10GRPRecord_Field_C_CUSTKEY): Option[Product] = (Q10GRPRecord_Field_C_CUSTKEY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q10GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord
}

trait Q10GRPRecordExtOps extends BaseExt with OptimalStringExtOps {

  import Q10GRPRecordQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  import OptimalStringQuasiNodes._
  implicit class Q10GRPRecordRep(self: Rep[Q10GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q10GRPRecordGetField(self, key)
    def C_COMMENT: Rep[OptimalString] = q10GRPRecord_Field_C_COMMENT(self)
    def C_ADDRESS: Rep[OptimalString] = q10GRPRecord_Field_C_ADDRESS(self)
    def N_NAME: Rep[OptimalString] = q10GRPRecord_Field_N_NAME(self)
    def C_PHONE: Rep[OptimalString] = q10GRPRecord_Field_C_PHONE(self)
    def C_ACCTBAL: Rep[Double] = q10GRPRecord_Field_C_ACCTBAL(self)
    def C_NAME: Rep[OptimalString] = q10GRPRecord_Field_C_NAME(self)
    def C_CUSTKEY: Rep[Int] = q10GRPRecord_Field_C_CUSTKEY(self)
  }
  object Q10GRPRecord {
    def apply(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = q10GRPRecordApplyObject(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT)
  }
  // constructors
  def __newQ10GRPRecord(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = q10GRPRecordNew(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT)

  // method definitions
  def q10GRPRecordApplyObject(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = { __newQ10GRPRecord(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT) }
  def q10GRPRecordNew(C_CUSTKEY: Rep[Int], C_NAME: Rep[OptimalString], C_ACCTBAL: Rep[Double], C_PHONE: Rep[OptimalString], N_NAME: Rep[OptimalString], C_ADDRESS: Rep[OptimalString], C_COMMENT: Rep[OptimalString]): Rep[Q10GRPRecord] = Q10GRPRecordNewExt(C_CUSTKEY, C_NAME, C_ACCTBAL, C_PHONE, N_NAME, C_ADDRESS, C_COMMENT)
  def q10GRPRecordGetField(self: Rep[Q10GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q10GRPRecordGetFieldExt(self, key)
  def q10GRPRecord_Field_C_COMMENT(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_COMMENTExt(self)
  def q10GRPRecord_Field_C_ADDRESS(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_ADDRESSExt(self)
  def q10GRPRecord_Field_N_NAME(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_N_NAMEExt(self)
  def q10GRPRecord_Field_C_PHONE(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_PHONEExt(self)
  def q10GRPRecord_Field_C_ACCTBAL(self: Rep[Q10GRPRecord]): Rep[Double] = Q10GRPRecord_Field_C_ACCTBALExt(self)
  def q10GRPRecord_Field_C_NAME(self: Rep[Q10GRPRecord]): Rep[OptimalString] = Q10GRPRecord_Field_C_NAMEExt(self)
  def q10GRPRecord_Field_C_CUSTKEY(self: Rep[Q10GRPRecord]): Rep[Int] = Q10GRPRecord_Field_C_CUSTKEYExt(self)
  type Q10GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q10GRPRecord
}

trait Q13IntRecordOps extends Base {
  // Type representation
  val Q13IntRecordType = Q13IntRecordIRs.Q13IntRecordType
  implicit val typeQ13IntRecord: TypeRep[Q13IntRecord] = Q13IntRecordType
  implicit class Q13IntRecordRep(self: Rep[Q13IntRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q13IntRecordGetField(self, key)
    def count_=(x$1: Rep[Int]): Rep[Unit] = q13IntRecord_Field_Count_$eq(self, x$1)
    def count: Rep[Int] = q13IntRecord_Field_Count(self)
  }
  object Q13IntRecord {
    def apply(count: Rep[Int]): Rep[Q13IntRecord] = q13IntRecordApplyObject(count)
  }
  // constructors
  def __newQ13IntRecord(count: Rep[Int]): Rep[Q13IntRecord] = q13IntRecordNew(count)
  // IR defs
  val Q13IntRecordNew = Q13IntRecordIRs.Q13IntRecordNew
  type Q13IntRecordNew = Q13IntRecordIRs.Q13IntRecordNew
  val Q13IntRecordGetField = Q13IntRecordIRs.Q13IntRecordGetField
  type Q13IntRecordGetField = Q13IntRecordIRs.Q13IntRecordGetField
  val Q13IntRecord_Field_Count__eq = Q13IntRecordIRs.Q13IntRecord_Field_Count__eq
  type Q13IntRecord_Field_Count__eq = Q13IntRecordIRs.Q13IntRecord_Field_Count__eq
  val Q13IntRecord_Field_Count = Q13IntRecordIRs.Q13IntRecord_Field_Count
  type Q13IntRecord_Field_Count = Q13IntRecordIRs.Q13IntRecord_Field_Count
  // method definitions
  def q13IntRecordNew(count: Rep[Int]): Rep[Q13IntRecord] = Q13IntRecordNew(count)
  def q13IntRecordGetField(self: Rep[Q13IntRecord], key: Rep[String]): Rep[Option[Any]] = Q13IntRecordGetField(self, key)
  def q13IntRecord_Field_Count_$eq(self: Rep[Q13IntRecord], x$1: Rep[Int]): Rep[Unit] = Q13IntRecord_Field_Count__eq(self, x$1)
  def q13IntRecord_Field_Count(self: Rep[Q13IntRecord]): Rep[Int] = Q13IntRecord_Field_Count(self)
  def q13IntRecordApplyObject(count: Rep[Int]): Rep[Q13IntRecord] = {
    __newQ13IntRecord(count)
  }
  type Q13IntRecord = ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord
}
object Q13IntRecordIRs extends Base {
  // Type representation
  case object Q13IntRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q13IntRecord](scala.reflect.runtime.universe.typeOf[Q13IntRecord]) {
    override def isRecord = true
  }
  implicit val typeQ13IntRecord: TypeRep[Q13IntRecord] = Q13IntRecordType
  // case classes
  case class Q13IntRecordNew(count: Rep[Int]) extends ConstructorDef[Q13IntRecord](List(), "Q13IntRecord", List(List(count))) {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  case class Q13IntRecordGetField(self: Rep[Q13IntRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q13IntRecord_Field_Count__eq(self: Rep[Q13IntRecord], x$1: Rep[Int]) extends FieldSetter[Int](self, "count", x$1) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q13IntRecord_Field_Count(self: Rep[Q13IntRecord]) extends FieldGetter[Int](self, "count") {
    override def curriedConstructor = (copy _)
  }

  type Q13IntRecord = ch.epfl.data.dblab.experimentation.tpch.Q13IntRecord
}
trait Q13IntRecordImplicits extends Q13IntRecordOps {
  // Add implicit conversions here!
}
trait Q13IntRecordComponent extends Q13IntRecordOps with Q13IntRecordImplicits {}

trait Q13IntRecordPartialEvaluation extends Q13IntRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 

  // Mutable field inlining 
  // Pure function partial evaluation
}

trait Q16GRPRecord1Ops extends Base with OptimalStringOps {
  // Type representation
  val Q16GRPRecord1Type = Q16GRPRecord1IRs.Q16GRPRecord1Type
  implicit val typeQ16GRPRecord1: TypeRep[Q16GRPRecord1] = Q16GRPRecord1Type
  implicit class Q16GRPRecord1Rep(self: Rep[Q16GRPRecord1]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q16GRPRecord1GetField(self, key)
    def PS_SUPPKEY: Rep[Int] = q16GRPRecord1_Field_PS_SUPPKEY(self)
    def P_SIZE: Rep[Int] = q16GRPRecord1_Field_P_SIZE(self)
    def P_TYPE: Rep[OptimalString] = q16GRPRecord1_Field_P_TYPE(self)
    def P_BRAND: Rep[OptimalString] = q16GRPRecord1_Field_P_BRAND(self)
  }
  object Q16GRPRecord1 {
    def apply(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = q16GRPRecord1ApplyObject(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY)
  }
  // constructors
  def __newQ16GRPRecord1(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = q16GRPRecord1New(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY)
  // IR defs
  val Q16GRPRecord1New = Q16GRPRecord1IRs.Q16GRPRecord1New
  type Q16GRPRecord1New = Q16GRPRecord1IRs.Q16GRPRecord1New
  val Q16GRPRecord1GetField = Q16GRPRecord1IRs.Q16GRPRecord1GetField
  type Q16GRPRecord1GetField = Q16GRPRecord1IRs.Q16GRPRecord1GetField
  val Q16GRPRecord1_Field_PS_SUPPKEY = Q16GRPRecord1IRs.Q16GRPRecord1_Field_PS_SUPPKEY
  type Q16GRPRecord1_Field_PS_SUPPKEY = Q16GRPRecord1IRs.Q16GRPRecord1_Field_PS_SUPPKEY
  val Q16GRPRecord1_Field_P_SIZE = Q16GRPRecord1IRs.Q16GRPRecord1_Field_P_SIZE
  type Q16GRPRecord1_Field_P_SIZE = Q16GRPRecord1IRs.Q16GRPRecord1_Field_P_SIZE
  val Q16GRPRecord1_Field_P_TYPE = Q16GRPRecord1IRs.Q16GRPRecord1_Field_P_TYPE
  type Q16GRPRecord1_Field_P_TYPE = Q16GRPRecord1IRs.Q16GRPRecord1_Field_P_TYPE
  val Q16GRPRecord1_Field_P_BRAND = Q16GRPRecord1IRs.Q16GRPRecord1_Field_P_BRAND
  type Q16GRPRecord1_Field_P_BRAND = Q16GRPRecord1IRs.Q16GRPRecord1_Field_P_BRAND
  // method definitions
  def q16GRPRecord1New(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = Q16GRPRecord1New(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY)
  def q16GRPRecord1GetField(self: Rep[Q16GRPRecord1], key: Rep[String]): Rep[Option[Any]] = Q16GRPRecord1GetField(self, key)
  def q16GRPRecord1_Field_PS_SUPPKEY(self: Rep[Q16GRPRecord1]): Rep[Int] = Q16GRPRecord1_Field_PS_SUPPKEY(self)
  def q16GRPRecord1_Field_P_SIZE(self: Rep[Q16GRPRecord1]): Rep[Int] = Q16GRPRecord1_Field_P_SIZE(self)
  def q16GRPRecord1_Field_P_TYPE(self: Rep[Q16GRPRecord1]): Rep[OptimalString] = Q16GRPRecord1_Field_P_TYPE(self)
  def q16GRPRecord1_Field_P_BRAND(self: Rep[Q16GRPRecord1]): Rep[OptimalString] = Q16GRPRecord1_Field_P_BRAND(self)
  def q16GRPRecord1ApplyObject(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = {
    __newQ16GRPRecord1(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY)
  }
  type Q16GRPRecord1 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1
}
object Q16GRPRecord1IRs extends Base {
  import OptimalStringIRs._
  // Type representation
  case object Q16GRPRecord1Type extends ch.epfl.data.sc.pardis.types.ReflectionType[Q16GRPRecord1](scala.reflect.runtime.universe.typeOf[Q16GRPRecord1]) {
    override def isRecord = true
  }
  implicit val typeQ16GRPRecord1: TypeRep[Q16GRPRecord1] = Q16GRPRecord1Type
  // case classes
  case class Q16GRPRecord1New(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]) extends ConstructorDef[Q16GRPRecord1](List(), "Q16GRPRecord1", List(List(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q16GRPRecord1GetField(self: Rep[Q16GRPRecord1], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q16GRPRecord1_Field_PS_SUPPKEY(self: Rep[Q16GRPRecord1]) extends FieldDef[Int](self, "PS_SUPPKEY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q16GRPRecord1]
      self.PS_SUPPKEY
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q16GRPRecord1_Field_P_SIZE(self: Rep[Q16GRPRecord1]) extends FieldDef[Int](self, "P_SIZE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q16GRPRecord1]
      self.P_SIZE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q16GRPRecord1_Field_P_TYPE(self: Rep[Q16GRPRecord1]) extends FieldDef[OptimalString](self, "P_TYPE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q16GRPRecord1]
      self.P_TYPE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q16GRPRecord1_Field_P_BRAND(self: Rep[Q16GRPRecord1]) extends FieldDef[OptimalString](self, "P_BRAND") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q16GRPRecord1]
      self.P_BRAND
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q16GRPRecord1 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1
}
trait Q16GRPRecord1Implicits extends Q16GRPRecord1Ops {
  // Add implicit conversions here!
}
trait Q16GRPRecord1Component extends Q16GRPRecord1Ops with Q16GRPRecord1Implicits {}

trait Q16GRPRecord1PartialEvaluation extends Q16GRPRecord1Component with BasePartialEvaluation {
  // Immutable field inlining 
  override def q16GRPRecord1_Field_PS_SUPPKEY(self: Rep[Q16GRPRecord1]): Rep[Int] = self match {
    case Def(node: Q16GRPRecord1New) => node.PS_SUPPKEY
    case _                           => super.q16GRPRecord1_Field_PS_SUPPKEY(self)
  }
  override def q16GRPRecord1_Field_P_SIZE(self: Rep[Q16GRPRecord1]): Rep[Int] = self match {
    case Def(node: Q16GRPRecord1New) => node.P_SIZE
    case _                           => super.q16GRPRecord1_Field_P_SIZE(self)
  }
  override def q16GRPRecord1_Field_P_TYPE(self: Rep[Q16GRPRecord1]): Rep[OptimalString] = self match {
    case Def(node: Q16GRPRecord1New) => node.P_TYPE
    case _                           => super.q16GRPRecord1_Field_P_TYPE(self)
  }
  override def q16GRPRecord1_Field_P_BRAND(self: Rep[Q16GRPRecord1]): Rep[OptimalString] = self match {
    case Def(node: Q16GRPRecord1New) => node.P_BRAND
    case _                           => super.q16GRPRecord1_Field_P_BRAND(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q16GRPRecord1QuasiNodes extends BaseExtIR {
  import Q16GRPRecord1IRs._
  import OptimalStringQuasiNodes._
  // case classes
  case class Q16GRPRecord1NewExt(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]) extends FunctionDef[Q16GRPRecord1New, Q16GRPRecord1] {
    override def nodeUnapply(t: Q16GRPRecord1New): Option[Product] = (Q16GRPRecord1New.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord1GetFieldExt(self: Rep[Q16GRPRecord1], key: Rep[String]) extends FunctionDef[Q16GRPRecord1GetField, Option[Any]] {
    override def nodeUnapply(t: Q16GRPRecord1GetField): Option[Product] = (Q16GRPRecord1GetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord1_Field_PS_SUPPKEYExt(self: Rep[Q16GRPRecord1]) extends FunctionDef[Q16GRPRecord1_Field_PS_SUPPKEY, Int] {
    override def nodeUnapply(t: Q16GRPRecord1_Field_PS_SUPPKEY): Option[Product] = (Q16GRPRecord1_Field_PS_SUPPKEY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord1_Field_P_SIZEExt(self: Rep[Q16GRPRecord1]) extends FunctionDef[Q16GRPRecord1_Field_P_SIZE, Int] {
    override def nodeUnapply(t: Q16GRPRecord1_Field_P_SIZE): Option[Product] = (Q16GRPRecord1_Field_P_SIZE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord1_Field_P_TYPEExt(self: Rep[Q16GRPRecord1]) extends FunctionDef[Q16GRPRecord1_Field_P_TYPE, OptimalString] {
    override def nodeUnapply(t: Q16GRPRecord1_Field_P_TYPE): Option[Product] = (Q16GRPRecord1_Field_P_TYPE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord1_Field_P_BRANDExt(self: Rep[Q16GRPRecord1]) extends FunctionDef[Q16GRPRecord1_Field_P_BRAND, OptimalString] {
    override def nodeUnapply(t: Q16GRPRecord1_Field_P_BRAND): Option[Product] = (Q16GRPRecord1_Field_P_BRAND.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q16GRPRecord1 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1
}

trait Q16GRPRecord1ExtOps extends BaseExt with OptimalStringExtOps {

  import Q16GRPRecord1QuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  import OptimalStringQuasiNodes._
  implicit class Q16GRPRecord1Rep(self: Rep[Q16GRPRecord1]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q16GRPRecord1GetField(self, key)
    def PS_SUPPKEY: Rep[Int] = q16GRPRecord1_Field_PS_SUPPKEY(self)
    def P_SIZE: Rep[Int] = q16GRPRecord1_Field_P_SIZE(self)
    def P_TYPE: Rep[OptimalString] = q16GRPRecord1_Field_P_TYPE(self)
    def P_BRAND: Rep[OptimalString] = q16GRPRecord1_Field_P_BRAND(self)
  }
  object Q16GRPRecord1 {
    def apply(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = q16GRPRecord1ApplyObject(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY)
  }
  // constructors
  def __newQ16GRPRecord1(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = q16GRPRecord1New(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY)

  // method definitions
  def q16GRPRecord1ApplyObject(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = { __newQ16GRPRecord1(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY) }
  def q16GRPRecord1New(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int], PS_SUPPKEY: Rep[Int]): Rep[Q16GRPRecord1] = Q16GRPRecord1NewExt(P_BRAND, P_TYPE, P_SIZE, PS_SUPPKEY)
  def q16GRPRecord1GetField(self: Rep[Q16GRPRecord1], key: Rep[String]): Rep[Option[Any]] = Q16GRPRecord1GetFieldExt(self, key)
  def q16GRPRecord1_Field_PS_SUPPKEY(self: Rep[Q16GRPRecord1]): Rep[Int] = Q16GRPRecord1_Field_PS_SUPPKEYExt(self)
  def q16GRPRecord1_Field_P_SIZE(self: Rep[Q16GRPRecord1]): Rep[Int] = Q16GRPRecord1_Field_P_SIZEExt(self)
  def q16GRPRecord1_Field_P_TYPE(self: Rep[Q16GRPRecord1]): Rep[OptimalString] = Q16GRPRecord1_Field_P_TYPEExt(self)
  def q16GRPRecord1_Field_P_BRAND(self: Rep[Q16GRPRecord1]): Rep[OptimalString] = Q16GRPRecord1_Field_P_BRANDExt(self)
  type Q16GRPRecord1 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord1
}

trait Q16GRPRecord2Ops extends Base with OptimalStringOps {
  // Type representation
  val Q16GRPRecord2Type = Q16GRPRecord2IRs.Q16GRPRecord2Type
  implicit val typeQ16GRPRecord2: TypeRep[Q16GRPRecord2] = Q16GRPRecord2Type
  implicit class Q16GRPRecord2Rep(self: Rep[Q16GRPRecord2]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q16GRPRecord2GetField(self, key)
    def P_SIZE: Rep[Int] = q16GRPRecord2_Field_P_SIZE(self)
    def P_TYPE: Rep[OptimalString] = q16GRPRecord2_Field_P_TYPE(self)
    def P_BRAND: Rep[OptimalString] = q16GRPRecord2_Field_P_BRAND(self)
  }
  object Q16GRPRecord2 {
    def apply(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = q16GRPRecord2ApplyObject(P_BRAND, P_TYPE, P_SIZE)
  }
  // constructors
  def __newQ16GRPRecord2(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = q16GRPRecord2New(P_BRAND, P_TYPE, P_SIZE)
  // IR defs
  val Q16GRPRecord2New = Q16GRPRecord2IRs.Q16GRPRecord2New
  type Q16GRPRecord2New = Q16GRPRecord2IRs.Q16GRPRecord2New
  val Q16GRPRecord2GetField = Q16GRPRecord2IRs.Q16GRPRecord2GetField
  type Q16GRPRecord2GetField = Q16GRPRecord2IRs.Q16GRPRecord2GetField
  val Q16GRPRecord2_Field_P_SIZE = Q16GRPRecord2IRs.Q16GRPRecord2_Field_P_SIZE
  type Q16GRPRecord2_Field_P_SIZE = Q16GRPRecord2IRs.Q16GRPRecord2_Field_P_SIZE
  val Q16GRPRecord2_Field_P_TYPE = Q16GRPRecord2IRs.Q16GRPRecord2_Field_P_TYPE
  type Q16GRPRecord2_Field_P_TYPE = Q16GRPRecord2IRs.Q16GRPRecord2_Field_P_TYPE
  val Q16GRPRecord2_Field_P_BRAND = Q16GRPRecord2IRs.Q16GRPRecord2_Field_P_BRAND
  type Q16GRPRecord2_Field_P_BRAND = Q16GRPRecord2IRs.Q16GRPRecord2_Field_P_BRAND
  // method definitions
  def q16GRPRecord2New(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = Q16GRPRecord2New(P_BRAND, P_TYPE, P_SIZE)
  def q16GRPRecord2GetField(self: Rep[Q16GRPRecord2], key: Rep[String]): Rep[Option[Any]] = Q16GRPRecord2GetField(self, key)
  def q16GRPRecord2_Field_P_SIZE(self: Rep[Q16GRPRecord2]): Rep[Int] = Q16GRPRecord2_Field_P_SIZE(self)
  def q16GRPRecord2_Field_P_TYPE(self: Rep[Q16GRPRecord2]): Rep[OptimalString] = Q16GRPRecord2_Field_P_TYPE(self)
  def q16GRPRecord2_Field_P_BRAND(self: Rep[Q16GRPRecord2]): Rep[OptimalString] = Q16GRPRecord2_Field_P_BRAND(self)
  def q16GRPRecord2ApplyObject(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = {
    __newQ16GRPRecord2(P_BRAND, P_TYPE, P_SIZE)
  }
  type Q16GRPRecord2 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2
}
object Q16GRPRecord2IRs extends Base {
  import OptimalStringIRs._
  // Type representation
  case object Q16GRPRecord2Type extends ch.epfl.data.sc.pardis.types.ReflectionType[Q16GRPRecord2](scala.reflect.runtime.universe.typeOf[Q16GRPRecord2]) {
    override def isRecord = true
  }
  implicit val typeQ16GRPRecord2: TypeRep[Q16GRPRecord2] = Q16GRPRecord2Type
  // case classes
  case class Q16GRPRecord2New(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]) extends ConstructorDef[Q16GRPRecord2](List(), "Q16GRPRecord2", List(List(P_BRAND, P_TYPE, P_SIZE))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q16GRPRecord2GetField(self: Rep[Q16GRPRecord2], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q16GRPRecord2_Field_P_SIZE(self: Rep[Q16GRPRecord2]) extends FieldDef[Int](self, "P_SIZE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q16GRPRecord2]
      self.P_SIZE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q16GRPRecord2_Field_P_TYPE(self: Rep[Q16GRPRecord2]) extends FieldDef[OptimalString](self, "P_TYPE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q16GRPRecord2]
      self.P_TYPE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q16GRPRecord2_Field_P_BRAND(self: Rep[Q16GRPRecord2]) extends FieldDef[OptimalString](self, "P_BRAND") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q16GRPRecord2]
      self.P_BRAND
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q16GRPRecord2 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2
}
trait Q16GRPRecord2Implicits extends Q16GRPRecord2Ops {
  // Add implicit conversions here!
}
trait Q16GRPRecord2Component extends Q16GRPRecord2Ops with Q16GRPRecord2Implicits {}

trait Q16GRPRecord2PartialEvaluation extends Q16GRPRecord2Component with BasePartialEvaluation {
  // Immutable field inlining 
  override def q16GRPRecord2_Field_P_SIZE(self: Rep[Q16GRPRecord2]): Rep[Int] = self match {
    case Def(node: Q16GRPRecord2New) => node.P_SIZE
    case _                           => super.q16GRPRecord2_Field_P_SIZE(self)
  }
  override def q16GRPRecord2_Field_P_TYPE(self: Rep[Q16GRPRecord2]): Rep[OptimalString] = self match {
    case Def(node: Q16GRPRecord2New) => node.P_TYPE
    case _                           => super.q16GRPRecord2_Field_P_TYPE(self)
  }
  override def q16GRPRecord2_Field_P_BRAND(self: Rep[Q16GRPRecord2]): Rep[OptimalString] = self match {
    case Def(node: Q16GRPRecord2New) => node.P_BRAND
    case _                           => super.q16GRPRecord2_Field_P_BRAND(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q16GRPRecord2QuasiNodes extends BaseExtIR {
  import Q16GRPRecord2IRs._
  import OptimalStringQuasiNodes._
  // case classes
  case class Q16GRPRecord2NewExt(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]) extends FunctionDef[Q16GRPRecord2New, Q16GRPRecord2] {
    override def nodeUnapply(t: Q16GRPRecord2New): Option[Product] = (Q16GRPRecord2New.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord2GetFieldExt(self: Rep[Q16GRPRecord2], key: Rep[String]) extends FunctionDef[Q16GRPRecord2GetField, Option[Any]] {
    override def nodeUnapply(t: Q16GRPRecord2GetField): Option[Product] = (Q16GRPRecord2GetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord2_Field_P_SIZEExt(self: Rep[Q16GRPRecord2]) extends FunctionDef[Q16GRPRecord2_Field_P_SIZE, Int] {
    override def nodeUnapply(t: Q16GRPRecord2_Field_P_SIZE): Option[Product] = (Q16GRPRecord2_Field_P_SIZE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord2_Field_P_TYPEExt(self: Rep[Q16GRPRecord2]) extends FunctionDef[Q16GRPRecord2_Field_P_TYPE, OptimalString] {
    override def nodeUnapply(t: Q16GRPRecord2_Field_P_TYPE): Option[Product] = (Q16GRPRecord2_Field_P_TYPE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q16GRPRecord2_Field_P_BRANDExt(self: Rep[Q16GRPRecord2]) extends FunctionDef[Q16GRPRecord2_Field_P_BRAND, OptimalString] {
    override def nodeUnapply(t: Q16GRPRecord2_Field_P_BRAND): Option[Product] = (Q16GRPRecord2_Field_P_BRAND.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q16GRPRecord2 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2
}

trait Q16GRPRecord2ExtOps extends BaseExt with OptimalStringExtOps {

  import Q16GRPRecord2QuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  import OptimalStringQuasiNodes._
  implicit class Q16GRPRecord2Rep(self: Rep[Q16GRPRecord2]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q16GRPRecord2GetField(self, key)
    def P_SIZE: Rep[Int] = q16GRPRecord2_Field_P_SIZE(self)
    def P_TYPE: Rep[OptimalString] = q16GRPRecord2_Field_P_TYPE(self)
    def P_BRAND: Rep[OptimalString] = q16GRPRecord2_Field_P_BRAND(self)
  }
  object Q16GRPRecord2 {
    def apply(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = q16GRPRecord2ApplyObject(P_BRAND, P_TYPE, P_SIZE)
  }
  // constructors
  def __newQ16GRPRecord2(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = q16GRPRecord2New(P_BRAND, P_TYPE, P_SIZE)

  // method definitions
  def q16GRPRecord2ApplyObject(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = { __newQ16GRPRecord2(P_BRAND, P_TYPE, P_SIZE) }
  def q16GRPRecord2New(P_BRAND: Rep[OptimalString], P_TYPE: Rep[OptimalString], P_SIZE: Rep[Int]): Rep[Q16GRPRecord2] = Q16GRPRecord2NewExt(P_BRAND, P_TYPE, P_SIZE)
  def q16GRPRecord2GetField(self: Rep[Q16GRPRecord2], key: Rep[String]): Rep[Option[Any]] = Q16GRPRecord2GetFieldExt(self, key)
  def q16GRPRecord2_Field_P_SIZE(self: Rep[Q16GRPRecord2]): Rep[Int] = Q16GRPRecord2_Field_P_SIZEExt(self)
  def q16GRPRecord2_Field_P_TYPE(self: Rep[Q16GRPRecord2]): Rep[OptimalString] = Q16GRPRecord2_Field_P_TYPEExt(self)
  def q16GRPRecord2_Field_P_BRAND(self: Rep[Q16GRPRecord2]): Rep[OptimalString] = Q16GRPRecord2_Field_P_BRANDExt(self)
  type Q16GRPRecord2 = ch.epfl.data.dblab.experimentation.tpch.Q16GRPRecord2
}

trait Q18GRPRecordOps extends Base with OptimalStringOps {
  // Type representation
  val Q18GRPRecordType = Q18GRPRecordIRs.Q18GRPRecordType
  implicit val typeQ18GRPRecord: TypeRep[Q18GRPRecord] = Q18GRPRecordType
  implicit class Q18GRPRecordRep(self: Rep[Q18GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q18GRPRecordGetField(self, key)
    def O_TOTALPRICE: Rep[Double] = q18GRPRecord_Field_O_TOTALPRICE(self)
    def O_ORDERDATE: Rep[Int] = q18GRPRecord_Field_O_ORDERDATE(self)
    def O_ORDERKEY: Rep[Int] = q18GRPRecord_Field_O_ORDERKEY(self)
    def C_CUSTKEY: Rep[Int] = q18GRPRecord_Field_C_CUSTKEY(self)
    def C_NAME: Rep[OptimalString] = q18GRPRecord_Field_C_NAME(self)
  }
  object Q18GRPRecord {
    def apply(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = q18GRPRecordApplyObject(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE)
  }
  // constructors
  def __newQ18GRPRecord(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = q18GRPRecordNew(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE)
  // IR defs
  val Q18GRPRecordNew = Q18GRPRecordIRs.Q18GRPRecordNew
  type Q18GRPRecordNew = Q18GRPRecordIRs.Q18GRPRecordNew
  val Q18GRPRecordGetField = Q18GRPRecordIRs.Q18GRPRecordGetField
  type Q18GRPRecordGetField = Q18GRPRecordIRs.Q18GRPRecordGetField
  val Q18GRPRecord_Field_O_TOTALPRICE = Q18GRPRecordIRs.Q18GRPRecord_Field_O_TOTALPRICE
  type Q18GRPRecord_Field_O_TOTALPRICE = Q18GRPRecordIRs.Q18GRPRecord_Field_O_TOTALPRICE
  val Q18GRPRecord_Field_O_ORDERDATE = Q18GRPRecordIRs.Q18GRPRecord_Field_O_ORDERDATE
  type Q18GRPRecord_Field_O_ORDERDATE = Q18GRPRecordIRs.Q18GRPRecord_Field_O_ORDERDATE
  val Q18GRPRecord_Field_O_ORDERKEY = Q18GRPRecordIRs.Q18GRPRecord_Field_O_ORDERKEY
  type Q18GRPRecord_Field_O_ORDERKEY = Q18GRPRecordIRs.Q18GRPRecord_Field_O_ORDERKEY
  val Q18GRPRecord_Field_C_CUSTKEY = Q18GRPRecordIRs.Q18GRPRecord_Field_C_CUSTKEY
  type Q18GRPRecord_Field_C_CUSTKEY = Q18GRPRecordIRs.Q18GRPRecord_Field_C_CUSTKEY
  val Q18GRPRecord_Field_C_NAME = Q18GRPRecordIRs.Q18GRPRecord_Field_C_NAME
  type Q18GRPRecord_Field_C_NAME = Q18GRPRecordIRs.Q18GRPRecord_Field_C_NAME
  // method definitions
  def q18GRPRecordNew(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = Q18GRPRecordNew(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE)
  def q18GRPRecordGetField(self: Rep[Q18GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q18GRPRecordGetField(self, key)
  def q18GRPRecord_Field_O_TOTALPRICE(self: Rep[Q18GRPRecord]): Rep[Double] = Q18GRPRecord_Field_O_TOTALPRICE(self)
  def q18GRPRecord_Field_O_ORDERDATE(self: Rep[Q18GRPRecord]): Rep[Int] = Q18GRPRecord_Field_O_ORDERDATE(self)
  def q18GRPRecord_Field_O_ORDERKEY(self: Rep[Q18GRPRecord]): Rep[Int] = Q18GRPRecord_Field_O_ORDERKEY(self)
  def q18GRPRecord_Field_C_CUSTKEY(self: Rep[Q18GRPRecord]): Rep[Int] = Q18GRPRecord_Field_C_CUSTKEY(self)
  def q18GRPRecord_Field_C_NAME(self: Rep[Q18GRPRecord]): Rep[OptimalString] = Q18GRPRecord_Field_C_NAME(self)
  def q18GRPRecordApplyObject(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = {
    __newQ18GRPRecord(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE)
  }
  type Q18GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord
}
object Q18GRPRecordIRs extends Base {
  import OptimalStringIRs._
  // Type representation
  case object Q18GRPRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q18GRPRecord](scala.reflect.runtime.universe.typeOf[Q18GRPRecord]) {
    override def isRecord = true
  }
  implicit val typeQ18GRPRecord: TypeRep[Q18GRPRecord] = Q18GRPRecordType
  // case classes
  case class Q18GRPRecordNew(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]) extends ConstructorDef[Q18GRPRecord](List(), "Q18GRPRecord", List(List(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q18GRPRecordGetField(self: Rep[Q18GRPRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q18GRPRecord_Field_O_TOTALPRICE(self: Rep[Q18GRPRecord]) extends FieldDef[Double](self, "O_TOTALPRICE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Double = {
      val self = children(0).asInstanceOf[Q18GRPRecord]
      self.O_TOTALPRICE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q18GRPRecord_Field_O_ORDERDATE(self: Rep[Q18GRPRecord]) extends FieldDef[Int](self, "O_ORDERDATE") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q18GRPRecord]
      self.O_ORDERDATE
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q18GRPRecord_Field_O_ORDERKEY(self: Rep[Q18GRPRecord]) extends FieldDef[Int](self, "O_ORDERKEY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q18GRPRecord]
      self.O_ORDERKEY
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q18GRPRecord_Field_C_CUSTKEY(self: Rep[Q18GRPRecord]) extends FieldDef[Int](self, "C_CUSTKEY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q18GRPRecord]
      self.C_CUSTKEY
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q18GRPRecord_Field_C_NAME(self: Rep[Q18GRPRecord]) extends FieldDef[OptimalString](self, "C_NAME") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): OptimalString = {
      val self = children(0).asInstanceOf[Q18GRPRecord]
      self.C_NAME
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q18GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord
}
trait Q18GRPRecordImplicits extends Q18GRPRecordOps {
  // Add implicit conversions here!
}
trait Q18GRPRecordComponent extends Q18GRPRecordOps with Q18GRPRecordImplicits {}

trait Q18GRPRecordPartialEvaluation extends Q18GRPRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def q18GRPRecord_Field_O_TOTALPRICE(self: Rep[Q18GRPRecord]): Rep[Double] = self match {
    case Def(node: Q18GRPRecordNew) => node.O_TOTALPRICE
    case _                          => super.q18GRPRecord_Field_O_TOTALPRICE(self)
  }
  override def q18GRPRecord_Field_O_ORDERDATE(self: Rep[Q18GRPRecord]): Rep[Int] = self match {
    case Def(node: Q18GRPRecordNew) => node.O_ORDERDATE
    case _                          => super.q18GRPRecord_Field_O_ORDERDATE(self)
  }
  override def q18GRPRecord_Field_O_ORDERKEY(self: Rep[Q18GRPRecord]): Rep[Int] = self match {
    case Def(node: Q18GRPRecordNew) => node.O_ORDERKEY
    case _                          => super.q18GRPRecord_Field_O_ORDERKEY(self)
  }
  override def q18GRPRecord_Field_C_CUSTKEY(self: Rep[Q18GRPRecord]): Rep[Int] = self match {
    case Def(node: Q18GRPRecordNew) => node.C_CUSTKEY
    case _                          => super.q18GRPRecord_Field_C_CUSTKEY(self)
  }
  override def q18GRPRecord_Field_C_NAME(self: Rep[Q18GRPRecord]): Rep[OptimalString] = self match {
    case Def(node: Q18GRPRecordNew) => node.C_NAME
    case _                          => super.q18GRPRecord_Field_C_NAME(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q18GRPRecordQuasiNodes extends BaseExtIR {
  import Q18GRPRecordIRs._
  import OptimalStringQuasiNodes._
  // case classes
  case class Q18GRPRecordNewExt(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]) extends FunctionDef[Q18GRPRecordNew, Q18GRPRecord] {
    override def nodeUnapply(t: Q18GRPRecordNew): Option[Product] = (Q18GRPRecordNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q18GRPRecordGetFieldExt(self: Rep[Q18GRPRecord], key: Rep[String]) extends FunctionDef[Q18GRPRecordGetField, Option[Any]] {
    override def nodeUnapply(t: Q18GRPRecordGetField): Option[Product] = (Q18GRPRecordGetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q18GRPRecord_Field_O_TOTALPRICEExt(self: Rep[Q18GRPRecord]) extends FunctionDef[Q18GRPRecord_Field_O_TOTALPRICE, Double] {
    override def nodeUnapply(t: Q18GRPRecord_Field_O_TOTALPRICE): Option[Product] = (Q18GRPRecord_Field_O_TOTALPRICE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q18GRPRecord_Field_O_ORDERDATEExt(self: Rep[Q18GRPRecord]) extends FunctionDef[Q18GRPRecord_Field_O_ORDERDATE, Int] {
    override def nodeUnapply(t: Q18GRPRecord_Field_O_ORDERDATE): Option[Product] = (Q18GRPRecord_Field_O_ORDERDATE.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q18GRPRecord_Field_O_ORDERKEYExt(self: Rep[Q18GRPRecord]) extends FunctionDef[Q18GRPRecord_Field_O_ORDERKEY, Int] {
    override def nodeUnapply(t: Q18GRPRecord_Field_O_ORDERKEY): Option[Product] = (Q18GRPRecord_Field_O_ORDERKEY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q18GRPRecord_Field_C_CUSTKEYExt(self: Rep[Q18GRPRecord]) extends FunctionDef[Q18GRPRecord_Field_C_CUSTKEY, Int] {
    override def nodeUnapply(t: Q18GRPRecord_Field_C_CUSTKEY): Option[Product] = (Q18GRPRecord_Field_C_CUSTKEY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q18GRPRecord_Field_C_NAMEExt(self: Rep[Q18GRPRecord]) extends FunctionDef[Q18GRPRecord_Field_C_NAME, OptimalString] {
    override def nodeUnapply(t: Q18GRPRecord_Field_C_NAME): Option[Product] = (Q18GRPRecord_Field_C_NAME.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q18GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord
}

trait Q18GRPRecordExtOps extends BaseExt with OptimalStringExtOps {

  import Q18GRPRecordQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  import OptimalStringQuasiNodes._
  implicit class Q18GRPRecordRep(self: Rep[Q18GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q18GRPRecordGetField(self, key)
    def O_TOTALPRICE: Rep[Double] = q18GRPRecord_Field_O_TOTALPRICE(self)
    def O_ORDERDATE: Rep[Int] = q18GRPRecord_Field_O_ORDERDATE(self)
    def O_ORDERKEY: Rep[Int] = q18GRPRecord_Field_O_ORDERKEY(self)
    def C_CUSTKEY: Rep[Int] = q18GRPRecord_Field_C_CUSTKEY(self)
    def C_NAME: Rep[OptimalString] = q18GRPRecord_Field_C_NAME(self)
  }
  object Q18GRPRecord {
    def apply(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = q18GRPRecordApplyObject(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE)
  }
  // constructors
  def __newQ18GRPRecord(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = q18GRPRecordNew(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE)

  // method definitions
  def q18GRPRecordApplyObject(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = { __newQ18GRPRecord(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE) }
  def q18GRPRecordNew(C_NAME: Rep[OptimalString], C_CUSTKEY: Rep[Int], O_ORDERKEY: Rep[Int], O_ORDERDATE: Rep[Int], O_TOTALPRICE: Rep[Double]): Rep[Q18GRPRecord] = Q18GRPRecordNewExt(C_NAME, C_CUSTKEY, O_ORDERKEY, O_ORDERDATE, O_TOTALPRICE)
  def q18GRPRecordGetField(self: Rep[Q18GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q18GRPRecordGetFieldExt(self, key)
  def q18GRPRecord_Field_O_TOTALPRICE(self: Rep[Q18GRPRecord]): Rep[Double] = Q18GRPRecord_Field_O_TOTALPRICEExt(self)
  def q18GRPRecord_Field_O_ORDERDATE(self: Rep[Q18GRPRecord]): Rep[Int] = Q18GRPRecord_Field_O_ORDERDATEExt(self)
  def q18GRPRecord_Field_O_ORDERKEY(self: Rep[Q18GRPRecord]): Rep[Int] = Q18GRPRecord_Field_O_ORDERKEYExt(self)
  def q18GRPRecord_Field_C_CUSTKEY(self: Rep[Q18GRPRecord]): Rep[Int] = Q18GRPRecord_Field_C_CUSTKEYExt(self)
  def q18GRPRecord_Field_C_NAME(self: Rep[Q18GRPRecord]): Rep[OptimalString] = Q18GRPRecord_Field_C_NAMEExt(self)
  type Q18GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q18GRPRecord
}

trait Q20GRPRecordOps extends Base {
  // Type representation
  val Q20GRPRecordType = Q20GRPRecordIRs.Q20GRPRecordType
  implicit val typeQ20GRPRecord: TypeRep[Q20GRPRecord] = Q20GRPRecordType
  implicit class Q20GRPRecordRep(self: Rep[Q20GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q20GRPRecordGetField(self, key)
    def PS_AVAILQTY: Rep[Int] = q20GRPRecord_Field_PS_AVAILQTY(self)
    def PS_SUPPKEY: Rep[Int] = q20GRPRecord_Field_PS_SUPPKEY(self)
    def PS_PARTKEY: Rep[Int] = q20GRPRecord_Field_PS_PARTKEY(self)
  }
  object Q20GRPRecord {
    def apply(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = q20GRPRecordApplyObject(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY)
  }
  // constructors
  def __newQ20GRPRecord(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = q20GRPRecordNew(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY)
  // IR defs
  val Q20GRPRecordNew = Q20GRPRecordIRs.Q20GRPRecordNew
  type Q20GRPRecordNew = Q20GRPRecordIRs.Q20GRPRecordNew
  val Q20GRPRecordGetField = Q20GRPRecordIRs.Q20GRPRecordGetField
  type Q20GRPRecordGetField = Q20GRPRecordIRs.Q20GRPRecordGetField
  val Q20GRPRecord_Field_PS_AVAILQTY = Q20GRPRecordIRs.Q20GRPRecord_Field_PS_AVAILQTY
  type Q20GRPRecord_Field_PS_AVAILQTY = Q20GRPRecordIRs.Q20GRPRecord_Field_PS_AVAILQTY
  val Q20GRPRecord_Field_PS_SUPPKEY = Q20GRPRecordIRs.Q20GRPRecord_Field_PS_SUPPKEY
  type Q20GRPRecord_Field_PS_SUPPKEY = Q20GRPRecordIRs.Q20GRPRecord_Field_PS_SUPPKEY
  val Q20GRPRecord_Field_PS_PARTKEY = Q20GRPRecordIRs.Q20GRPRecord_Field_PS_PARTKEY
  type Q20GRPRecord_Field_PS_PARTKEY = Q20GRPRecordIRs.Q20GRPRecord_Field_PS_PARTKEY
  // method definitions
  def q20GRPRecordNew(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = Q20GRPRecordNew(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY)
  def q20GRPRecordGetField(self: Rep[Q20GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q20GRPRecordGetField(self, key)
  def q20GRPRecord_Field_PS_AVAILQTY(self: Rep[Q20GRPRecord]): Rep[Int] = Q20GRPRecord_Field_PS_AVAILQTY(self)
  def q20GRPRecord_Field_PS_SUPPKEY(self: Rep[Q20GRPRecord]): Rep[Int] = Q20GRPRecord_Field_PS_SUPPKEY(self)
  def q20GRPRecord_Field_PS_PARTKEY(self: Rep[Q20GRPRecord]): Rep[Int] = Q20GRPRecord_Field_PS_PARTKEY(self)
  def q20GRPRecordApplyObject(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = {
    __newQ20GRPRecord(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY)
  }
  type Q20GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord
}
object Q20GRPRecordIRs extends Base {
  // Type representation
  case object Q20GRPRecordType extends ch.epfl.data.sc.pardis.types.ReflectionType[Q20GRPRecord](scala.reflect.runtime.universe.typeOf[Q20GRPRecord]) {
    override def isRecord = true
  }
  implicit val typeQ20GRPRecord: TypeRep[Q20GRPRecord] = Q20GRPRecordType
  // case classes
  case class Q20GRPRecordNew(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]) extends ConstructorDef[Q20GRPRecord](List(), "Q20GRPRecord", List(List(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY))) {
    override def curriedConstructor = (copy _).curried
    override def isPure = true

  }

  case class Q20GRPRecordGetField(self: Rep[Q20GRPRecord], key: Rep[String]) extends FunctionDef[Option[Any]](Some(self), "getField", List(List(key))) {
    override def curriedConstructor = (copy _).curried
  }

  case class Q20GRPRecord_Field_PS_AVAILQTY(self: Rep[Q20GRPRecord]) extends FieldDef[Int](self, "PS_AVAILQTY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q20GRPRecord]
      self.PS_AVAILQTY
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q20GRPRecord_Field_PS_SUPPKEY(self: Rep[Q20GRPRecord]) extends FieldDef[Int](self, "PS_SUPPKEY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q20GRPRecord]
      self.PS_SUPPKEY
    }
    override def partiallyEvaluable: Boolean = true

  }

  case class Q20GRPRecord_Field_PS_PARTKEY(self: Rep[Q20GRPRecord]) extends FieldDef[Int](self, "PS_PARTKEY") {
    override def curriedConstructor = (copy _)
    override def isPure = true

    override def partiallyEvaluate(children: Any*): Int = {
      val self = children(0).asInstanceOf[Q20GRPRecord]
      self.PS_PARTKEY
    }
    override def partiallyEvaluable: Boolean = true

  }

  type Q20GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord
}
trait Q20GRPRecordImplicits extends Q20GRPRecordOps {
  // Add implicit conversions here!
}
trait Q20GRPRecordComponent extends Q20GRPRecordOps with Q20GRPRecordImplicits {}

trait Q20GRPRecordPartialEvaluation extends Q20GRPRecordComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def q20GRPRecord_Field_PS_AVAILQTY(self: Rep[Q20GRPRecord]): Rep[Int] = self match {
    case Def(node: Q20GRPRecordNew) => node.PS_AVAILQTY
    case _                          => super.q20GRPRecord_Field_PS_AVAILQTY(self)
  }
  override def q20GRPRecord_Field_PS_SUPPKEY(self: Rep[Q20GRPRecord]): Rep[Int] = self match {
    case Def(node: Q20GRPRecordNew) => node.PS_SUPPKEY
    case _                          => super.q20GRPRecord_Field_PS_SUPPKEY(self)
  }
  override def q20GRPRecord_Field_PS_PARTKEY(self: Rep[Q20GRPRecord]): Rep[Int] = self match {
    case Def(node: Q20GRPRecordNew) => node.PS_PARTKEY
    case _                          => super.q20GRPRecord_Field_PS_PARTKEY(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object Q20GRPRecordQuasiNodes extends BaseExtIR {
  import Q20GRPRecordIRs._
  // case classes
  case class Q20GRPRecordNewExt(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]) extends FunctionDef[Q20GRPRecordNew, Q20GRPRecord] {
    override def nodeUnapply(t: Q20GRPRecordNew): Option[Product] = (Q20GRPRecordNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q20GRPRecordGetFieldExt(self: Rep[Q20GRPRecord], key: Rep[String]) extends FunctionDef[Q20GRPRecordGetField, Option[Any]] {
    override def nodeUnapply(t: Q20GRPRecordGetField): Option[Product] = (Q20GRPRecordGetField.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q20GRPRecord_Field_PS_AVAILQTYExt(self: Rep[Q20GRPRecord]) extends FunctionDef[Q20GRPRecord_Field_PS_AVAILQTY, Int] {
    override def nodeUnapply(t: Q20GRPRecord_Field_PS_AVAILQTY): Option[Product] = (Q20GRPRecord_Field_PS_AVAILQTY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q20GRPRecord_Field_PS_SUPPKEYExt(self: Rep[Q20GRPRecord]) extends FunctionDef[Q20GRPRecord_Field_PS_SUPPKEY, Int] {
    override def nodeUnapply(t: Q20GRPRecord_Field_PS_SUPPKEY): Option[Product] = (Q20GRPRecord_Field_PS_SUPPKEY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class Q20GRPRecord_Field_PS_PARTKEYExt(self: Rep[Q20GRPRecord]) extends FunctionDef[Q20GRPRecord_Field_PS_PARTKEY, Int] {
    override def nodeUnapply(t: Q20GRPRecord_Field_PS_PARTKEY): Option[Product] = (Q20GRPRecord_Field_PS_PARTKEY.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type Q20GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord
}

trait Q20GRPRecordExtOps extends BaseExt {

  import Q20GRPRecordQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  implicit class Q20GRPRecordRep(self: Rep[Q20GRPRecord]) {
    def getField(key: Rep[String]): Rep[Option[Any]] = q20GRPRecordGetField(self, key)
    def PS_AVAILQTY: Rep[Int] = q20GRPRecord_Field_PS_AVAILQTY(self)
    def PS_SUPPKEY: Rep[Int] = q20GRPRecord_Field_PS_SUPPKEY(self)
    def PS_PARTKEY: Rep[Int] = q20GRPRecord_Field_PS_PARTKEY(self)
  }
  object Q20GRPRecord {
    def apply(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = q20GRPRecordApplyObject(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY)
  }
  // constructors
  def __newQ20GRPRecord(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = q20GRPRecordNew(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY)

  // method definitions
  def q20GRPRecordApplyObject(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = { __newQ20GRPRecord(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY) }
  def q20GRPRecordNew(PS_PARTKEY: Rep[Int], PS_SUPPKEY: Rep[Int], PS_AVAILQTY: Rep[Int]): Rep[Q20GRPRecord] = Q20GRPRecordNewExt(PS_PARTKEY, PS_SUPPKEY, PS_AVAILQTY)
  def q20GRPRecordGetField(self: Rep[Q20GRPRecord], key: Rep[String]): Rep[Option[Any]] = Q20GRPRecordGetFieldExt(self, key)
  def q20GRPRecord_Field_PS_AVAILQTY(self: Rep[Q20GRPRecord]): Rep[Int] = Q20GRPRecord_Field_PS_AVAILQTYExt(self)
  def q20GRPRecord_Field_PS_SUPPKEY(self: Rep[Q20GRPRecord]): Rep[Int] = Q20GRPRecord_Field_PS_SUPPKEYExt(self)
  def q20GRPRecord_Field_PS_PARTKEY(self: Rep[Q20GRPRecord]): Rep[Int] = Q20GRPRecord_Field_PS_PARTKEYExt(self)
  type Q20GRPRecord = ch.epfl.data.dblab.experimentation.tpch.Q20GRPRecord
}

