/* Generated by Purgatory 2014-2017 */

package ch.epfl.data.dblab.deep.storagemanager

import ch.epfl.data.sc.pardis
import pardis.ir._
import pardis.types.PardisTypeImplicits._
import pardis.effects._
import pardis.deep._
import pardis.deep.scalalib._
import pardis.deep.scalalib.collection._
import pardis.deep.scalalib.io._

import ch.epfl.data.sc.pardis.quasi.anf.{ BaseExt, BaseExtIR }
import ch.epfl.data.sc.pardis.quasi.TypeParameters.MaybeParamTag

trait FastScannerOps extends Base with OptimalStringOps {
  // Type representation
  val FastScannerType = FastScannerIRs.FastScannerType
  implicit val typeFastScanner: TypeRep[FastScanner] = FastScannerType
  implicit class FastScannerRep(self: Rep[FastScanner]) {
    def next_int(): Rep[Int] = fastScannerNext_int(self)
    def next_double(): Rep[Double] = fastScannerNext_double(self)
    def next_char(): Rep[Char] = fastScannerNext_char(self)
    def next(buf: Rep[Array[Byte]])(implicit overload1: Overloaded1): Rep[Int] = fastScannerNext1(self, buf)
    def next(buf: Rep[Array[Byte]], offset: Rep[Int])(implicit overload2: Overloaded2): Rep[Int] = fastScannerNext2(self, buf, offset)
    def next_string: Rep[OptimalString] = fastScannerNext_string(self)
    def next_date: Rep[Int] = fastScannerNext_date(self)
    def hasNext(): Rep[Boolean] = fastScannerHasNext(self)
    def filename: Rep[String] = fastScanner_Field_Filename(self)
  }
  object FastScanner {

  }
  // constructors
  def __newFastScanner(filename: Rep[String]): Rep[FastScanner] = fastScannerNew(filename)
  // IR defs
  val FastScannerNew = FastScannerIRs.FastScannerNew
  type FastScannerNew = FastScannerIRs.FastScannerNew
  val FastScannerNext_int = FastScannerIRs.FastScannerNext_int
  type FastScannerNext_int = FastScannerIRs.FastScannerNext_int
  val FastScannerNext_double = FastScannerIRs.FastScannerNext_double
  type FastScannerNext_double = FastScannerIRs.FastScannerNext_double
  val FastScannerNext_char = FastScannerIRs.FastScannerNext_char
  type FastScannerNext_char = FastScannerIRs.FastScannerNext_char
  val FastScannerNext1 = FastScannerIRs.FastScannerNext1
  type FastScannerNext1 = FastScannerIRs.FastScannerNext1
  val FastScannerNext2 = FastScannerIRs.FastScannerNext2
  type FastScannerNext2 = FastScannerIRs.FastScannerNext2
  val FastScannerNext_string = FastScannerIRs.FastScannerNext_string
  type FastScannerNext_string = FastScannerIRs.FastScannerNext_string
  val FastScannerNext_date = FastScannerIRs.FastScannerNext_date
  type FastScannerNext_date = FastScannerIRs.FastScannerNext_date
  val FastScannerHasNext = FastScannerIRs.FastScannerHasNext
  type FastScannerHasNext = FastScannerIRs.FastScannerHasNext
  val FastScanner_Field_Filename = FastScannerIRs.FastScanner_Field_Filename
  type FastScanner_Field_Filename = FastScannerIRs.FastScanner_Field_Filename
  // method definitions
  def fastScannerNew(filename: Rep[String]): Rep[FastScanner] = FastScannerNew(filename)
  def fastScannerNext_int(self: Rep[FastScanner]): Rep[Int] = FastScannerNext_int(self)
  def fastScannerNext_double(self: Rep[FastScanner]): Rep[Double] = FastScannerNext_double(self)
  def fastScannerNext_char(self: Rep[FastScanner]): Rep[Char] = FastScannerNext_char(self)
  def fastScannerNext1(self: Rep[FastScanner], buf: Rep[Array[Byte]]): Rep[Int] = FastScannerNext1(self, buf)
  def fastScannerNext2(self: Rep[FastScanner], buf: Rep[Array[Byte]], offset: Rep[Int]): Rep[Int] = FastScannerNext2(self, buf, offset)
  def fastScannerNext_string(self: Rep[FastScanner]): Rep[OptimalString] = FastScannerNext_string(self)
  def fastScannerNext_date(self: Rep[FastScanner]): Rep[Int] = FastScannerNext_date(self)
  def fastScannerHasNext(self: Rep[FastScanner]): Rep[Boolean] = FastScannerHasNext(self)
  def fastScanner_Field_Filename(self: Rep[FastScanner]): Rep[String] = FastScanner_Field_Filename(self)
  type FastScanner = ch.epfl.data.dblab.storagemanager.FastScanner
}
object FastScannerIRs extends Base {
  import OptimalStringIRs._
  // Type representation
  case object FastScannerType extends TypeRep[FastScanner] {
    def rebuild(newArguments: TypeRep[_]*): TypeRep[_] = FastScannerType
    val name = "FastScanner"
    val typeArguments = Nil
  }
  implicit val typeFastScanner: TypeRep[FastScanner] = FastScannerType
  // case classes
  case class FastScannerNew(filename: Rep[String]) extends ConstructorDef[FastScanner](List(), "FastScanner", List(List(filename))) {
    override def curriedConstructor = (copy _)
  }

  case class FastScannerNext_int(self: Rep[FastScanner]) extends FunctionDef[Int](Some(self), "next_int", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class FastScannerNext_double(self: Rep[FastScanner]) extends FunctionDef[Double](Some(self), "next_double", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class FastScannerNext_char(self: Rep[FastScanner]) extends FunctionDef[Char](Some(self), "next_char", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class FastScannerNext1(self: Rep[FastScanner], buf: Rep[Array[Byte]]) extends FunctionDef[Int](Some(self), "next", List(List(buf))) {
    override def curriedConstructor = (copy _).curried
  }

  case class FastScannerNext2(self: Rep[FastScanner], buf: Rep[Array[Byte]], offset: Rep[Int]) extends FunctionDef[Int](Some(self), "next", List(List(buf, offset))) {
    override def curriedConstructor = (copy _).curried
  }

  case class FastScannerNext_string(self: Rep[FastScanner]) extends FunctionDef[OptimalString](Some(self), "next_string", List()) {
    override def curriedConstructor = (copy _)
  }

  case class FastScannerNext_date(self: Rep[FastScanner]) extends FunctionDef[Int](Some(self), "next_date", List()) {
    override def curriedConstructor = (copy _)
  }

  case class FastScannerHasNext(self: Rep[FastScanner]) extends FunctionDef[Boolean](Some(self), "hasNext", List(List())) {
    override def curriedConstructor = (copy _)
  }

  case class FastScanner_Field_Filename(self: Rep[FastScanner]) extends FieldDef[String](self, "filename") {
    override def curriedConstructor = (copy _)
    override def isPure = true

  }

  type FastScanner = ch.epfl.data.dblab.storagemanager.FastScanner
}
trait FastScannerImplicits extends FastScannerOps {
  // Add implicit conversions here!
}
trait FastScannerComponent extends FastScannerOps with FastScannerImplicits {}

trait FastScannerPartialEvaluation extends FastScannerComponent with BasePartialEvaluation {
  // Immutable field inlining 
  override def fastScanner_Field_Filename(self: Rep[FastScanner]): Rep[String] = self match {
    case Def(node: FastScannerNew) => node.filename
    case _                         => super.fastScanner_Field_Filename(self)
  }

  // Mutable field inlining 
  // Pure function partial evaluation
}

// QUASI GENERATED CODE:

object FastScannerQuasiNodes extends BaseExtIR {
  import FastScannerIRs._
  import OptimalStringQuasiNodes._
  // case classes
  case class FastScannerNewExt(filename: Rep[String]) extends FunctionDef[FastScannerNew, FastScanner] {
    override def nodeUnapply(t: FastScannerNew): Option[Product] = (FastScannerNew.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerNext_intExt(self: Rep[FastScanner]) extends FunctionDef[FastScannerNext_int, Int] {
    override def nodeUnapply(t: FastScannerNext_int): Option[Product] = (FastScannerNext_int.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerNext_doubleExt(self: Rep[FastScanner]) extends FunctionDef[FastScannerNext_double, Double] {
    override def nodeUnapply(t: FastScannerNext_double): Option[Product] = (FastScannerNext_double.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerNext_charExt(self: Rep[FastScanner]) extends FunctionDef[FastScannerNext_char, Char] {
    override def nodeUnapply(t: FastScannerNext_char): Option[Product] = (FastScannerNext_char.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerNext1Ext(self: Rep[FastScanner], buf: Rep[Array[Byte]]) extends FunctionDef[FastScannerNext1, Int] {
    override def nodeUnapply(t: FastScannerNext1): Option[Product] = (FastScannerNext1.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerNext2Ext(self: Rep[FastScanner], buf: Rep[Array[Byte]], offset: Rep[Int]) extends FunctionDef[FastScannerNext2, Int] {
    override def nodeUnapply(t: FastScannerNext2): Option[Product] = (FastScannerNext2.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerNext_stringExt(self: Rep[FastScanner]) extends FunctionDef[FastScannerNext_string, OptimalString] {
    override def nodeUnapply(t: FastScannerNext_string): Option[Product] = (FastScannerNext_string.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerNext_dateExt(self: Rep[FastScanner]) extends FunctionDef[FastScannerNext_date, Int] {
    override def nodeUnapply(t: FastScannerNext_date): Option[Product] = (FastScannerNext_date.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScannerHasNextExt(self: Rep[FastScanner]) extends FunctionDef[FastScannerHasNext, Boolean] {
    override def nodeUnapply(t: FastScannerHasNext): Option[Product] = (FastScannerHasNext.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  case class FastScanner_Field_FilenameExt(self: Rep[FastScanner]) extends FunctionDef[FastScanner_Field_Filename, String] {
    override def nodeUnapply(t: FastScanner_Field_Filename): Option[Product] = (FastScanner_Field_Filename.unapply(t): Option[Product]) map { r =>
      r
    }
  }
  type FastScanner = ch.epfl.data.dblab.storagemanager.FastScanner
}

trait FastScannerExtOps extends BaseExt with OptimalStringExtOps {

  import FastScannerQuasiNodes._
  import ch.epfl.data.sc.pardis.quasi.OverloadHackObj._
  import OptimalStringQuasiNodes._
  implicit class FastScannerRep(self: Rep[FastScanner]) {
    def next_int(): Rep[Int] = fastScannerNext_int(self)
    def next_double(): Rep[Double] = fastScannerNext_double(self)
    def next_char(): Rep[Char] = fastScannerNext_char(self)
    def next(buf: Rep[Array[Byte]])(implicit overload1: Overloaded1): Rep[Int] = fastScannerNext1(self, buf)
    def next(buf: Rep[Array[Byte]], offset: Rep[Int])(implicit overload2: Overloaded2): Rep[Int] = fastScannerNext2(self, buf, offset)
    def next_string: Rep[OptimalString] = fastScannerNext_string(self)
    def next_date: Rep[Int] = fastScannerNext_date(self)
    def hasNext(): Rep[Boolean] = fastScannerHasNext(self)
    def filename: Rep[String] = fastScanner_Field_Filename(self)
  }
  object FastScanner {
  }
  // constructors
  def __newFastScanner(filename: Rep[String]): Rep[FastScanner] = fastScannerNew(filename)

  // method definitions
  def fastScannerNew(filename: Rep[String]): Rep[FastScanner] = FastScannerNewExt(filename)
  def fastScannerNext_int(self: Rep[FastScanner]): Rep[Int] = FastScannerNext_intExt(self)
  def fastScannerNext_double(self: Rep[FastScanner]): Rep[Double] = FastScannerNext_doubleExt(self)
  def fastScannerNext_char(self: Rep[FastScanner]): Rep[Char] = FastScannerNext_charExt(self)
  def fastScannerNext1(self: Rep[FastScanner], buf: Rep[Array[Byte]]): Rep[Int] = FastScannerNext1Ext(self, buf)
  def fastScannerNext2(self: Rep[FastScanner], buf: Rep[Array[Byte]], offset: Rep[Int]): Rep[Int] = FastScannerNext2Ext(self, buf, offset)
  def fastScannerNext_string(self: Rep[FastScanner]): Rep[OptimalString] = FastScannerNext_stringExt(self)
  def fastScannerNext_date(self: Rep[FastScanner]): Rep[Int] = FastScannerNext_dateExt(self)
  def fastScannerHasNext(self: Rep[FastScanner]): Rep[Boolean] = FastScannerHasNextExt(self)
  def fastScanner_Field_Filename(self: Rep[FastScanner]): Rep[String] = FastScanner_Field_FilenameExt(self)
  type FastScanner = ch.epfl.data.dblab.storagemanager.FastScanner
}

